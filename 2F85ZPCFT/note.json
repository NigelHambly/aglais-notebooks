{
  "paragraphs": [
    {
      "text": "%pyspark\nimport sys\nsys.version_info\nimport pandas\nimport matplotlib\nimport matplotlib.pyplot as plt",
      "user": "admin",
      "dateUpdated": "2020-11-24 12:31:35.785",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1597700067863_572409186",
      "id": "20200817-213427_1162718354",
      "dateCreated": "2020-08-17 21:34:27.863",
      "dateStarted": "2020-11-04 18:30:33.523",
      "dateFinished": "2020-11-04 18:31:53.017",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nimport healpy\nimport sys, os\n#import hdbscan\nprint(sys.executable)\n",
      "user": "admin",
      "dateUpdated": "2020-08-21 08:24:46.193",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1597684367205_-181806949",
      "id": "20200817-171247_315683362",
      "dateCreated": "2020-08-17 17:12:47.205",
      "dateStarted": "2020-08-21 08:24:46.238",
      "dateFinished": "2020-08-21 08:24:51.436",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport sys, os\nimport healpy \nimport hdbscan\n\nprint(sys.executable)",
      "user": "admin",
      "dateUpdated": "2020-08-18 10:17:20.273",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1596720295202_-240303317",
      "id": "20200806-132455_1677641672",
      "dateCreated": "2020-08-06 13:24:55.202",
      "dateStarted": "2020-08-18 10:17:33.743",
      "dateFinished": "2020-08-18 10:17:35.126",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport sys, os\nimport healpy \nimport hdbscan\n\nprint(sys.executable)",
      "user": "admin",
      "dateUpdated": "2020-08-18 10:18:06.278",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1597745773578_526866566",
      "id": "20200818-101613_777242817",
      "dateCreated": "2020-08-18 10:16:13.578",
      "dateStarted": "2020-08-18 10:18:06.304",
      "dateFinished": "2020-08-18 10:18:06.313",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport sys, os\nimport healpy \nimport hdbscan\n\nprint(sys.executable)",
      "user": "admin",
      "dateUpdated": "2020-08-18 10:15:47.762",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1597745747718_-2145468913",
      "id": "20200818-101547_995243689",
      "dateCreated": "2020-08-18 10:15:47.718",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n\n# define the data frame source on the given column selection/predicates:\ndf \u003d sqlContext.read.parquet(\n    \"/hadoop/gaia/parquet/gdr2/gaia_source/*.parquet\"\n    ).select(\n    [\"designation\",\"source_id\",\"ra\",\"ra_error\",\"dec\",\"dec_error\",\"parallax\",\"parallax_error\",\"parallax_over_error\",\"pmra\",\"pmra_error\",\"pmdec\",\"pmdec_error\",\"l\",\"b\"]\n    ).where(\n    \"abs(b) \u003c 30.0 AND parallax \u003e 1.0 and parallax_over_error \u003e 10.0 AND phot_g_mean_flux_over_error \u003e 36.19 AND astrometric_sigma5d_max \u003c 0.3 AND visibility_periods_used \u003e 8 AND (astrometric_excess_noise \u003c 1 OR (astrometric_excess_noise \u003e 1 AND astrometric_excess_noise_sig \u003c 2))\"\n    )\n\n# sanity check\ndf.show()\nprint (\"Data frame rows: \",df.count())\n",
      "user": "gaiauser",
      "dateUpdated": "2020-09-24 16:59:58.517",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1588252442639_2098383607",
      "id": "20200430-131402_1236312424",
      "dateCreated": "2020-04-30 13:14:02.640",
      "dateStarted": "2020-09-24 16:59:58.614",
      "dateFinished": "2020-09-24 17:20:46.835",
      "status": "ABORT",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n\n# define the data frame source on the given column selection/predicates:\ndf \u003d sqlContext.read.parquet(\n    \"/hadoop/gaia/parquet/gdr2/gaia_source/*.parquet\"\n    ).select(\n    [\"designation\",\"source_id\",\"ra\",\"ra_error\",\"dec\",\"dec_error\",\"parallax\",\"parallax_error\",\"parallax_over_error\",\"pmra\",\"pmra_error\",\"pmdec\",\"pmdec_error\",\"l\",\"b\"]\n    ).where(\n    \"abs(b) \u003c 30.0 AND parallax \u003e 1.0 and parallax_over_error \u003e 10.0 AND phot_g_mean_flux_over_error \u003e 36.19 AND astrometric_sigma5d_max \u003c 0.3 AND visibility_periods_used \u003e 8 AND (astrometric_excess_noise \u003c 1 OR (astrometric_excess_noise \u003e 1 AND astrometric_excess_noise_sig \u003c 2))\"\n    )\n\n# sanity check\ndf.show()\nprint (\"Data frame rows: \",df.count())\n",
      "user": "admin",
      "dateUpdated": "2020-08-06 13:15:22.426",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1596719722372_-1514778944",
      "id": "20200806-131522_1702586193",
      "dateCreated": "2020-08-06 13:15:22.372",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\nrdd \u003d df.rdd.map(list)\nrdd \u003d sc.parallelize([(1,2,3),(4,5,6),(7,8,9)])\ndf \u003d rdd.toDF([\"a\",\"b\",\"c\"])\nprint(rdd)",
      "user": "admin",
      "dateUpdated": "2020-06-01 16:30:11.571",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1591028833020_172156540",
      "id": "20200601-162713_1896897723",
      "dateCreated": "2020-06-01 16:27:13.020",
      "dateStarted": "2020-06-01 16:30:11.583",
      "dateFinished": "2020-06-01 16:30:23.602",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\nfrom operator import truediv\nstorage_info \u003d  sc._jsc.sc().getRDDStorageInfo()\n\n[{\n    \"memSize\": s.memSize(), \n    \"numPartitions\": s.numPartitions(), \n    \"numCachedPartitions\": s.numCachedPartitions(),\n    \"fractionCached\": truediv(s.numCachedPartitions(), s.numPartitions())\n} for s in storage_info]",
      "user": "admin",
      "dateUpdated": "2020-06-01 16:35:33.754",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1591024545640_-1208251418",
      "id": "20200601-151545_1687234758",
      "dateCreated": "2020-06-01 15:15:45.641",
      "dateStarted": "2020-06-01 16:35:33.768",
      "dateFinished": "2020-06-01 16:35:33.777",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\nappid \u003d sc._jsc.sc().applicationId()\nhost \u003d \"stv-dev-master\"\nport \u003d \"8088\"\nbaseurl \u003d \"http://{0}:{1}/proxy/{2}/api/v1/applications/{2}/\".format(\n    host, port, sc.applicationId\n)\n",
      "user": "admin",
      "dateUpdated": "2020-06-01 16:27:00.864",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1591024765526_-309018260",
      "id": "20200601-151925_1821242017",
      "dateCreated": "2020-06-01 15:19:25.527",
      "dateStarted": "2020-06-01 16:27:00.877",
      "dateFinished": "2020-06-01 16:27:00.887",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n## Get Storage info\n\n\nimport requests\nurl \u003d baseurl + \"storage/rdd/\"\nprint(url)\n\n[r.json() for r  in [\n   requests.get(\"{0}{1}\".format(url, rdd.get(\"id\"))) for\n   rdd  in requests.get(url).json()\n] if r.status_code \u003d\u003d 200]",
      "user": "admin",
      "dateUpdated": "2020-06-01 16:37:48.572",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1591024702409_-1378145922",
      "id": "20200601-151822_1463176312",
      "dateCreated": "2020-06-01 15:18:22.409",
      "dateStarted": "2020-06-01 16:33:36.891",
      "dateFinished": "2020-06-01 16:33:36.926",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n## Get Storage info\n\n\nimport requests\nurl \u003d baseurl + \"jobs\"\nprint(url)\njobs_json \u003d requests.get(url).json()\nprint([[obj.get(\"name\"),obj.get(\"status\")]  for obj  in jobs_json])",
      "user": "admin",
      "dateUpdated": "2020-06-01 16:50:05.042",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1591029393406_-943973147",
      "id": "20200601-163633_1773359143",
      "dateCreated": "2020-06-01 16:36:33.406",
      "dateStarted": "2020-06-01 16:50:05.057",
      "dateFinished": "2020-06-01 16:50:05.114",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n## Get Storage info\n\n\nimport requests\nurl \u003d baseurl + \"storage/rdd/\"\nprint(url)\n\n[r.json() for r  in [\n   requests.get(\"{0}{1}\".format(url, rdd.get(\"id\"))) for\n   rdd  in requests.get(url).json()\n] if r.status_code \u003d\u003d 200]",
      "user": "admin",
      "dateUpdated": "2020-06-01 16:36:34.532",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1591029394517_1710441692",
      "id": "20200601-163634_1189220974",
      "dateCreated": "2020-06-01 16:36:34.517",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n## Get Storage info\n\n\nimport requests\nurl \u003d baseurl + \"storage/rdd/\"\nprint(url)\n\n[r.json() for r  in [\n   requests.get(\"{0}{1}\".format(url, rdd.get(\"id\"))) for\n   rdd  in requests.get(url).json()\n] if r.status_code \u003d\u003d 200]",
      "user": "admin",
      "dateUpdated": "2020-06-01 16:36:35.460",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1591029395444_-586987257",
      "id": "20200601-163635_1301270297",
      "dateCreated": "2020-06-01 16:36:35.444",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n## Get Storage info\n\n\nimport requests\nurl \u003d baseurl + \"jobs\"\nprint(url)\njsonStrings \u003d requests.get(url).json()\notherPeopleRDD \u003d sc.parallelize(jsonStrings)\notherPeople \u003d spark.read.json(otherPeopleRDD)\notherPeople.show()",
      "user": "admin",
      "dateUpdated": "2020-06-01 17:08:20.582",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1591029389193_1833307599",
      "id": "20200601-163629_2050527829",
      "dateCreated": "2020-06-01 16:36:29.193",
      "dateStarted": "2020-06-01 17:08:20.616",
      "dateFinished": "2020-06-01 17:08:29.425",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n",
      "user": "admin",
      "dateUpdated": "2020-06-01 16:24:46.520",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1591028686519_388604110",
      "id": "20200601-162446_1700300957",
      "dateCreated": "2020-06-01 16:24:46.519",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\nimport pandas as pd\nimport numpy as np\nspark.conf.set(\"spark.sql.execution.arrow.enabled\", \"true\")\n\n\npandas_df \u003d df.select(\"*\").limit(1000).toPandas()\nprint(type(pandas_df))\npandas_df.head()",
      "user": "gaiauser",
      "dateUpdated": "2020-06-01 12:49:31.225",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1588249894229_1751286737",
      "id": "20200430-120420_1382591179",
      "dateCreated": "2020-04-30 12:31:34.229",
      "dateStarted": "2020-06-01 12:49:31.261",
      "dateFinished": "2020-06-01 12:58:40.787",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\nimport random\n\nNUM_SAMPLES \u003d 1000000000\n\ndef inside(p):\n    x, y \u003d random.random(), random.random()\n    return x*x + y*y \u003c 1\n\ncount \u003d sc.parallelize(xrange(0, NUM_SAMPLES)) \\\n             .filter(inside).count()\nprint \"Pi is roughly %f\" % (4.0 * count / NUM_SAMPLES)\n\n",
      "user": "gaiauser",
      "dateUpdated": "2020-06-01 13:20:21.856",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1588249894230_-878383906",
      "id": "20200430-120425_1459560607",
      "dateCreated": "2020-04-30 12:31:34.230",
      "dateStarted": "2020-06-01 13:20:21.889",
      "dateFinished": "2020-06-01 13:21:04.002",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\nfrom random import choice\nfrom string import digits, ascii_lowercase\n\nchars \u003d digits + ascii_lowercase\nseq \u003d [\"\".join([choice(chars) for i in range(3)]) for j in range(50000000)]\ndata \u003d sc.parallelize(seq)\ncounts \u003d data.map(lambda word: (word, 1)).reduceByKey(lambda a, b: a + b).top(5)\ndict(counts)",
      "user": "admin",
      "dateUpdated": "2020-04-30 16:22:00.079",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1588249894230_1935153628",
      "id": "20200430-120423_250737383",
      "dateCreated": "2020-04-30 12:31:34.230",
      "dateStarted": "2020-04-30 16:22:00.102",
      "dateFinished": "2020-04-30 16:23:56.124",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\nimport matplotlib",
      "user": "admin",
      "dateUpdated": "2020-08-17 16:51:21.796",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1588263720079_378211275",
      "id": "20200430-162200_403978237",
      "dateCreated": "2020-04-30 16:22:00.079",
      "dateStarted": "2020-08-17 16:51:21.826",
      "dateFinished": "2020-08-17 16:51:21.834",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n",
      "user": "admin",
      "dateUpdated": "2020-08-17 16:51:11.074",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1597683071073_2108689476",
      "id": "20200817-165111_254084760",
      "dateCreated": "2020-08-17 16:51:11.073",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "/experiments/stv/benchmarks",
  "id": "2F85ZPCFT",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "python:shared_process": [],
    "angular:shared_process": [],
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}