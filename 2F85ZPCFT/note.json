{
  "paragraphs": [
    {
      "text": "%pyspark\nimport sys\nsys.version_info\nimport pandas\nimport matplotlib",
      "user": "admin",
      "dateUpdated": "2020-11-04 18:30:33.362",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1597700067863_572409186",
      "id": "20200817-213427_1162718354",
      "dateCreated": "2020-08-17 21:34:27.863",
      "dateStarted": "2020-11-04 18:30:33.523",
      "dateFinished": "2020-11-04 18:31:53.017",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport matplotlib.pyplot as plt",
      "user": "admin",
      "dateUpdated": "2020-09-11 13:28:16.227",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1596721646489_1008351250",
      "id": "20200806-134726_2010370564",
      "dateCreated": "2020-08-06 13:47:26.489",
      "dateStarted": "2020-09-11 13:28:16.278",
      "dateFinished": "2020-09-11 13:28:17.443",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%python\nimport healpy\nimport sys, os\n#import hdbscan\nprint(sys.executable)\n",
      "user": "admin",
      "dateUpdated": "2020-08-21 08:24:46.193",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "/usr/bin/python3.7\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1597684367205_-181806949",
      "id": "20200817-171247_315683362",
      "dateCreated": "2020-08-17 17:12:47.205",
      "dateStarted": "2020-08-21 08:24:46.238",
      "dateFinished": "2020-08-21 08:24:51.436",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport sys, os\nimport healpy \nimport hdbscan\n\nprint(sys.executable)",
      "user": "admin",
      "dateUpdated": "2020-08-18 10:17:20.273",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "/usr/bin/python3\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1596720295202_-240303317",
      "id": "20200806-132455_1677641672",
      "dateCreated": "2020-08-06 13:24:55.202",
      "dateStarted": "2020-08-18 10:17:33.743",
      "dateFinished": "2020-08-18 10:17:35.126",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport sys, os\nimport healpy \nimport hdbscan\n\nprint(sys.executable)",
      "user": "admin",
      "dateUpdated": "2020-08-18 10:18:06.278",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "/usr/bin/python3\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1597745773578_526866566",
      "id": "20200818-101613_777242817",
      "dateCreated": "2020-08-18 10:16:13.578",
      "dateStarted": "2020-08-18 10:18:06.304",
      "dateFinished": "2020-08-18 10:18:06.313",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pyspark\nimport sys, os\nimport healpy \nimport hdbscan\n\nprint(sys.executable)",
      "user": "admin",
      "dateUpdated": "2020-08-18 10:15:47.762",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1597745747718_-2145468913",
      "id": "20200818-101547_995243689",
      "dateCreated": "2020-08-18 10:15:47.718",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n\n# define the data frame source on the given column selection/predicates:\ndf \u003d sqlContext.read.parquet(\n    \"/hadoop/gaia/parquet/gdr2/gaia_source/*.parquet\"\n    ).select(\n    [\"designation\",\"source_id\",\"ra\",\"ra_error\",\"dec\",\"dec_error\",\"parallax\",\"parallax_error\",\"parallax_over_error\",\"pmra\",\"pmra_error\",\"pmdec\",\"pmdec_error\",\"l\",\"b\"]\n    ).where(\n    \"abs(b) \u003c 30.0 AND parallax \u003e 1.0 and parallax_over_error \u003e 10.0 AND phot_g_mean_flux_over_error \u003e 36.19 AND astrometric_sigma5d_max \u003c 0.3 AND visibility_periods_used \u003e 8 AND (astrometric_excess_noise \u003c 1 OR (astrometric_excess_noise \u003e 1 AND astrometric_excess_noise_sig \u003c 2))\"\n    )\n\n# sanity check\ndf.show()\nprint (\"Data frame rows: \",df.count())\n",
      "user": "gaiauser",
      "dateUpdated": "2020-09-24 16:59:58.517",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)\n\u001b[0;32m\u003cipython-input-4-bccc7504e0cc\u003e\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# define the data frame source on the given column selection/predicates:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m df \u003d sqlContext.read.parquet(\n\u001b[0;32m----\u003e 3\u001b[0;31m     \u001b[0;34m\"/hadoop/gaia/parquet/gdr2/gaia_source/*.parquet\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;34m[\u001b[0m\u001b[0;34m\"designation\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"source_id\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"ra\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"ra_error\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"dec\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"dec_error\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"parallax\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"parallax_error\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"parallax_over_error\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"pmra\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"pmra_error\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"pmdec\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"pmdec_error\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"l\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"b\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m~/spark/python/lib/pyspark.zip/pyspark/sql/readwriter.py\u001b[0m in \u001b[0;36mparquet\u001b[0;34m(self, *paths)\u001b[0m\n\u001b[1;32m    314\u001b[0m         \u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u0027name\u0027\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\u0027string\u0027\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\u0027year\u0027\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\u0027int\u0027\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\u0027month\u0027\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\u0027int\u0027\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\u0027day\u0027\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\u0027int\u0027\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    315\u001b[0m         \"\"\"\n\u001b[0;32m--\u003e 316\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_df\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jreader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparquet\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_to_seq\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_spark\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpaths\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    317\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    318\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mignore_unicode_prefix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m~/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1253\u001b[0m             \u001b[0mproto\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEND_COMMAND_PART\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1254\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1255\u001b[0;31m         \u001b[0manswer\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1256\u001b[0m         return_value \u003d get_return_value(\n\u001b[1;32m   1257\u001b[0m             answer, self.gateway_client, self.target_id, self.name)\n\n\u001b[0;32m~/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36msend_command\u001b[0;34m(self, command, retry, binary)\u001b[0m\n\u001b[1;32m    983\u001b[0m         \u001b[0mconnection\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_connection\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    984\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 985\u001b[0;31m             \u001b[0mresponse\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mconnection\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    986\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbinary\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    987\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_connection_guard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconnection\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m~/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36msend_command\u001b[0;34m(self, command)\u001b[0m\n\u001b[1;32m   1150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1151\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1152\u001b[0;31m             \u001b[0manswer\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0msmart_decode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstream\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1153\u001b[0m             \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdebug\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Answer received: {0}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0manswer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1154\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0manswer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproto\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRETURN_MESSAGE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/usr/lib64/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    587\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    591\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_timeout_occurred\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1588252442639_2098383607",
      "id": "20200430-131402_1236312424",
      "dateCreated": "2020-04-30 13:14:02.640",
      "dateStarted": "2020-09-24 16:59:58.614",
      "dateFinished": "2020-09-24 17:20:46.835",
      "status": "ABORT",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n\n# define the data frame source on the given column selection/predicates:\ndf \u003d sqlContext.read.parquet(\n    \"/hadoop/gaia/parquet/gdr2/gaia_source/*.parquet\"\n    ).select(\n    [\"designation\",\"source_id\",\"ra\",\"ra_error\",\"dec\",\"dec_error\",\"parallax\",\"parallax_error\",\"parallax_over_error\",\"pmra\",\"pmra_error\",\"pmdec\",\"pmdec_error\",\"l\",\"b\"]\n    ).where(\n    \"abs(b) \u003c 30.0 AND parallax \u003e 1.0 and parallax_over_error \u003e 10.0 AND phot_g_mean_flux_over_error \u003e 36.19 AND astrometric_sigma5d_max \u003c 0.3 AND visibility_periods_used \u003e 8 AND (astrometric_excess_noise \u003c 1 OR (astrometric_excess_noise \u003e 1 AND astrometric_excess_noise_sig \u003c 2))\"\n    )\n\n# sanity check\ndf.show()\nprint (\"Data frame rows: \",df.count())\n",
      "user": "admin",
      "dateUpdated": "2020-08-06 13:15:22.426",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1596719722372_-1514778944",
      "id": "20200806-131522_1702586193",
      "dateCreated": "2020-08-06 13:15:22.372",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\nrdd \u003d df.rdd.map(list)\nrdd \u003d sc.parallelize([(1,2,3),(4,5,6),(7,8,9)])\ndf \u003d rdd.toDF([\"a\",\"b\",\"c\"])\nprint(rdd)",
      "user": "admin",
      "dateUpdated": "2020-06-01 16:30:11.571",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "ParallelCollectionRDD[21] at parallelize at PythonRDD.scala:195\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591028833020_172156540",
      "id": "20200601-162713_1896897723",
      "dateCreated": "2020-06-01 16:27:13.020",
      "dateStarted": "2020-06-01 16:30:11.583",
      "dateFinished": "2020-06-01 16:30:23.602",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\nfrom operator import truediv\nstorage_info \u003d  sc._jsc.sc().getRDDStorageInfo()\n\n[{\n    \"memSize\": s.memSize(), \n    \"numPartitions\": s.numPartitions(), \n    \"numCachedPartitions\": s.numCachedPartitions(),\n    \"fractionCached\": truediv(s.numCachedPartitions(), s.numPartitions())\n} for s in storage_info]",
      "user": "admin",
      "dateUpdated": "2020-06-01 16:35:33.754",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591024545640_-1208251418",
      "id": "20200601-151545_1687234758",
      "dateCreated": "2020-06-01 15:15:45.641",
      "dateStarted": "2020-06-01 16:35:33.768",
      "dateFinished": "2020-06-01 16:35:33.777",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\nappid \u003d sc._jsc.sc().applicationId()\nhost \u003d \"stv-dev-master\"\nport \u003d \"8088\"\nbaseurl \u003d \"http://{0}:{1}/proxy/{2}/api/v1/applications/{2}/\".format(\n    host, port, sc.applicationId\n)\n",
      "user": "admin",
      "dateUpdated": "2020-06-01 16:27:00.864",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1591024765526_-309018260",
      "id": "20200601-151925_1821242017",
      "dateCreated": "2020-06-01 15:19:25.527",
      "dateStarted": "2020-06-01 16:27:00.877",
      "dateFinished": "2020-06-01 16:27:00.887",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n## Get Storage info\n\n\nimport requests\nurl \u003d baseurl + \"storage/rdd/\"\nprint(url)\n\n[r.json() for r  in [\n   requests.get(\"{0}{1}\".format(url, rdd.get(\"id\"))) for\n   rdd  in requests.get(url).json()\n] if r.status_code \u003d\u003d 200]",
      "user": "admin",
      "dateUpdated": "2020-06-01 16:37:48.572",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "http://stv-dev-master:8088/proxy/application_1588261403747_0012/api/v1/applications/application_1588261403747_0012/storage/rdd/\n[]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591024702409_-1378145922",
      "id": "20200601-151822_1463176312",
      "dateCreated": "2020-06-01 15:18:22.409",
      "dateStarted": "2020-06-01 16:33:36.891",
      "dateFinished": "2020-06-01 16:33:36.926",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n## Get Storage info\n\n\nimport requests\nurl \u003d baseurl + \"jobs\"\nprint(url)\njobs_json \u003d requests.get(url).json()\nprint([[obj.get(\"name\"),obj.get(\"status\")]  for obj  in jobs_json])",
      "user": "admin",
      "dateUpdated": "2020-06-01 16:50:05.042",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "http://stv-dev-master:8088/proxy/application_1588261403747_0012/api/v1/applications/application_1588261403747_0012/jobs\n[[u\u0027count at NativeMethodAccessorImpl.java:0\u0027, u\u0027SUCCEEDED\u0027], [u\u0027showString at NativeMethodAccessorImpl.java:0\u0027, u\u0027SUCCEEDED\u0027], [u\u0027parquet at NativeMethodAccessorImpl.java:0\u0027, u\u0027SUCCEEDED\u0027], [u\u0027parquet at NativeMethodAccessorImpl.java:0\u0027, u\u0027SUCCEEDED\u0027], [u\u0027runJob at PythonRDD.scala:153\u0027, u\u0027SUCCEEDED\u0027], [u\u0027runJob at PythonRDD.scala:153\u0027, u\u0027SUCCEEDED\u0027], [u\u0027runJob at PythonRDD.scala:153\u0027, u\u0027SUCCEEDED\u0027], [u\u0027count at NativeMethodAccessorImpl.java:0\u0027, u\u0027SUCCEEDED\u0027], [u\u0027showString at NativeMethodAccessorImpl.java:0\u0027, u\u0027SUCCEEDED\u0027], [u\u0027parquet at NativeMethodAccessorImpl.java:0\u0027, u\u0027SUCCEEDED\u0027], [u\u0027parquet at NativeMethodAccessorImpl.java:0\u0027, u\u0027SUCCEEDED\u0027]]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591029393406_-943973147",
      "id": "20200601-163633_1773359143",
      "dateCreated": "2020-06-01 16:36:33.406",
      "dateStarted": "2020-06-01 16:50:05.057",
      "dateFinished": "2020-06-01 16:50:05.114",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n## Get Storage info\n\n\nimport requests\nurl \u003d baseurl + \"storage/rdd/\"\nprint(url)\n\n[r.json() for r  in [\n   requests.get(\"{0}{1}\".format(url, rdd.get(\"id\"))) for\n   rdd  in requests.get(url).json()\n] if r.status_code \u003d\u003d 200]",
      "user": "admin",
      "dateUpdated": "2020-06-01 16:36:34.532",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1591029394517_1710441692",
      "id": "20200601-163634_1189220974",
      "dateCreated": "2020-06-01 16:36:34.517",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n## Get Storage info\n\n\nimport requests\nurl \u003d baseurl + \"storage/rdd/\"\nprint(url)\n\n[r.json() for r  in [\n   requests.get(\"{0}{1}\".format(url, rdd.get(\"id\"))) for\n   rdd  in requests.get(url).json()\n] if r.status_code \u003d\u003d 200]",
      "user": "admin",
      "dateUpdated": "2020-06-01 16:36:35.460",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1591029395444_-586987257",
      "id": "20200601-163635_1301270297",
      "dateCreated": "2020-06-01 16:36:35.444",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n## Get Storage info\n\n\nimport requests\nurl \u003d baseurl + \"jobs\"\nprint(url)\njsonStrings \u003d requests.get(url).json()\notherPeopleRDD \u003d sc.parallelize(jsonStrings)\notherPeople \u003d spark.read.json(otherPeopleRDD)\notherPeople.show()",
      "user": "admin",
      "dateUpdated": "2020-06-01 17:08:20.582",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "http://stv-dev-master:8088/proxy/application_1588261403747_0012/api/v1/applications/application_1588261403747_0012/jobs\n+--------------------+\n|     _corrupt_record|\n+--------------------+\n|{u\u0027status\u0027: u\u0027SUC...|\n|{u\u0027status\u0027: u\u0027SUC...|\n|{u\u0027status\u0027: u\u0027SUC...|\n|{u\u0027status\u0027: u\u0027SUC...|\n|{u\u0027status\u0027: u\u0027SUC...|\n|{u\u0027status\u0027: u\u0027SUC...|\n|{u\u0027status\u0027: u\u0027SUC...|\n|{u\u0027status\u0027: u\u0027SUC...|\n|{u\u0027status\u0027: u\u0027SUC...|\n|{u\u0027status\u0027: u\u0027SUC...|\n|{u\u0027status\u0027: u\u0027SUC...|\n+--------------------+\n\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1591029389193_1833307599",
      "id": "20200601-163629_2050527829",
      "dateCreated": "2020-06-01 16:36:29.193",
      "dateStarted": "2020-06-01 17:08:20.616",
      "dateFinished": "2020-06-01 17:08:29.425",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n",
      "user": "admin",
      "dateUpdated": "2020-06-01 16:24:46.520",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1591028686519_388604110",
      "id": "20200601-162446_1700300957",
      "dateCreated": "2020-06-01 16:24:46.519",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\nimport pandas as pd\nimport numpy as np\nspark.conf.set(\"spark.sql.execution.arrow.enabled\", \"true\")\n\n\npandas_df \u003d df.select(\"*\").limit(1000).toPandas()\nprint(type(pandas_df))\npandas_df.head()",
      "user": "gaiauser",
      "dateUpdated": "2020-06-01 12:49:31.225",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cclass \u0027pandas.core.frame.DataFrame\u0027\u003e\n                    designation            source_id          ra  ra_error        dec  dec_error  parallax  ...  parallax_over_error       pmra  pmra_error     pmdec  pmdec_error           l         b\n0  Gaia DR2 1997093890665687936  1997093890665687936  349.074846  0.091112  55.637023   0.081428  1.143461  ...            10.051795   6.160035    0.166643  9.330707     0.152634  109.727299 -4.776538\n1  Gaia DR2 1997071698573077248  1997071698573077248  348.745023  0.031140  55.327774   0.025459  4.241663  ...           112.778946  28.688068    0.058128  3.477846     0.047094  109.439945 -4.996973\n2  Gaia DR2 1997052079164411776  1997052079164411776  351.143432  0.098654  56.207542   0.079220  1.411722  ...            11.800892  -3.505648    0.187847 -2.368924     0.149660  111.016362 -4.641432\n3  Gaia DR2 1997069327751129216  1997069327751129216  348.881732  0.041305  55.378434   0.030602  1.050642  ...            23.203552  -0.286767    0.076746 -4.143482     0.056916  109.531121 -4.978081\n4  Gaia DR2 1997089084600448128  1997089084600448128  348.551006  0.018602  55.552354   0.016187  1.449570  ...            65.355415   8.820982    0.034499  4.483677     0.027750  109.419729 -4.747688\n\n[5 rows x 15 columns]\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1588249894229_1751286737",
      "id": "20200430-120420_1382591179",
      "dateCreated": "2020-04-30 12:31:34.229",
      "dateStarted": "2020-06-01 12:49:31.261",
      "dateFinished": "2020-06-01 12:58:40.787",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\nimport random\n\nNUM_SAMPLES \u003d 1000000000\n\ndef inside(p):\n    x, y \u003d random.random(), random.random()\n    return x*x + y*y \u003c 1\n\ncount \u003d sc.parallelize(xrange(0, NUM_SAMPLES)) \\\n             .filter(inside).count()\nprint \"Pi is roughly %f\" % (4.0 * count / NUM_SAMPLES)\n\n",
      "user": "gaiauser",
      "dateUpdated": "2020-06-01 13:20:21.856",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Pi is roughly 3.141558\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1588249894230_-878383906",
      "id": "20200430-120425_1459560607",
      "dateCreated": "2020-04-30 12:31:34.230",
      "dateStarted": "2020-06-01 13:20:21.889",
      "dateFinished": "2020-06-01 13:21:04.002",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\nfrom random import choice\nfrom string import digits, ascii_lowercase\n\nchars \u003d digits + ascii_lowercase\nseq \u003d [\"\".join([choice(chars) for i in range(3)]) for j in range(50000000)]\ndata \u003d sc.parallelize(seq)\ncounts \u003d data.map(lambda word: (word, 1)).reduceByKey(lambda a, b: a + b).top(5)\ndict(counts)",
      "user": "admin",
      "dateUpdated": "2020-04-30 16:22:00.079",
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/python",
        "fontSize": 9.0,
        "results": {},
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "{\u0027zzw\u0027: 1056, \u0027zzv\u0027: 1049, \u0027zzz\u0027: 1041, \u0027zzy\u0027: 1069, \u0027zzx\u0027: 1054}\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1588249894230_1935153628",
      "id": "20200430-120423_250737383",
      "dateCreated": "2020-04-30 12:31:34.230",
      "dateStarted": "2020-04-30 16:22:00.102",
      "dateFinished": "2020-04-30 16:23:56.124",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\nimport matplotlib",
      "user": "admin",
      "dateUpdated": "2020-08-17 16:51:21.796",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1588263720079_378211275",
      "id": "20200430-162200_403978237",
      "dateCreated": "2020-04-30 16:22:00.079",
      "dateStarted": "2020-08-17 16:51:21.826",
      "dateFinished": "2020-08-17 16:51:21.834",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n",
      "user": "admin",
      "dateUpdated": "2020-08-17 16:51:11.074",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1597683071073_2108689476",
      "id": "20200817-165111_254084760",
      "dateCreated": "2020-08-17 16:51:11.073",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "/experiments/stv/benchmarks",
  "id": "2F85ZPCFT",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "spark:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}