{
  "paragraphs": [
    {
      "text": "%md\n\n### IMPORTANT IF RUNNING FINAL TEST CHANGE normalize \u003d True! and save \u003d \u0027filename\u0027!\n",
      "user": "dcr",
      "dateUpdated": "2021-08-05 00:33:27.826",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eIMPORTANT IF RUNNING FINAL TEST CHANGE normalize \u003d True! and save \u003d \u0026lsquo;filename\u0026rsquo;!\u003c/h3\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1628090874394_-1083758566",
      "id": "20210804-152754_728703257",
      "dateCreated": "2021-08-04 15:27:54.394",
      "dateStarted": "2021-08-04 15:58:34.314",
      "dateFinished": "2021-08-04 15:58:34.322",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\nimport numpy as np\nimport pandas as pd\nimport pyspark.ml as ml\nimport matplotlib.pylab as plt\nfrom collections import Counter\nimport pyspark.sql.functions as f\nfrom pyspark.ml.feature import VectorAssembler\nfrom pyspark.sql.functions import lit, col, when, floor\nfrom pyspark.ml.classification import MultilayerPerceptronClassifier\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\n\nuser_home \u003d \u0027file:///user/dcr/\u0027",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:58:34.414",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625581653395_1507700533",
      "id": "20210706-142733_1394646815",
      "dateCreated": "2021-07-06 14:27:33.395",
      "dateStarted": "2021-08-04 15:58:34.448",
      "dateFinished": "2021-08-04 15:58:35.198",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n# from mllib_results import MLlib_confusion_matrix, MLlibMultiClassEvaluator, plottingThreshold",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:58:35.249",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625839938596_994557036",
      "id": "20210709-141218_1170342984",
      "dateCreated": "2021-07-09 14:12:18.596",
      "dateStarted": "2021-08-04 15:58:35.287",
      "dateFinished": "2021-08-04 15:58:35.503",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n# define the data source\n# gs_df \u003d sqlContext.read.parquet(\u0027file:////user/nch/PARQUET/TESTS/GEDR3/*.parquet\u0027)\n# # register as SQL-queryable \n# gs_df.createOrReplaceTempView(\u0027dcr_gaia_source\u0027)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:58:35.587",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625648950407_1021994287",
      "id": "20210707-090910_1022361690",
      "dateCreated": "2021-07-07 09:09:10.407",
      "dateStarted": "2021-08-04 15:58:35.621",
      "dateFinished": "2021-08-04 15:58:35.790",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\ncolumns \u003d \u0027source_id, parallax, parallax_error, parallax_over_error, pmra, astrometric_sigma5d_max,\\\npmdec, pmdec_error, pmra_error, astrometric_excess\\\n_noise ,visibility_periods_used, ruwe, astrometric_gof_al,\\\nipd_gof_harmonic_amplitude, ipd_frac_odd_win, ipd_frac_multi_peak, phot_g_mean_mag, phot_rp_mean_mag, g_rp\u0027",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:58:35.821",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1627896017164_-174450795",
      "id": "20210802-092017_1155122414",
      "dateCreated": "2021-08-02 09:20:17.165",
      "dateStarted": "2021-08-04 15:58:35.857",
      "dateFinished": "2021-08-04 15:58:36.023",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Collect Required Data",
      "text": "%spark.pyspark\n# clear any previously cached data in the context (cells may be executed in any order, and out-dated by changes from here onwards)\nsqlContext.clearCache()\n\n# Select all data\nraw_sources_df \u003d spark.sql(f\u0027SELECT {columns} \\\n FROM gaia_source\u0027)\n#  WHERE (1/parallax \u003c 1)\u0027)\n# cache it for speedy access below (all subsequent samples are derived from this):\n# raw_sources_cached \u003d raw_sources_df.cache()\n# ... some good advice concerning caching in Spark here: https://towardsdatascience.com/best-practices-for-caching-in-spark-sql-b22fb0f02d34\n\n# register as SQL-queryable\nraw_sources_df.createOrReplaceTempView(\u0027dcr_raw_sources\u0027)\ndel raw_sources_df\n# raw_sources_df.count()\n# EDR3: 1,055,241,799 sources in XXmin XXsec (\u003c3 kpcs)\n# EDR3: 574,486,895 sources in 00min 02sec (\u003c1 kpcs)\n# EDR3: 357,995,072 sources in 00min 02sec (\u003c0.1 kpcs)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:58:36.057",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625581617886_-1521281747",
      "id": "20210706-142657_7677965",
      "dateCreated": "2021-07-06 14:26:57.886",
      "dateStarted": "2021-08-04 15:58:36.088",
      "dateFinished": "2021-08-04 15:58:36.809",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n# raw_sources_df.count()",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:58:36.889",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1627392913321_1655927669",
      "id": "20210727-133513_1982076653",
      "dateCreated": "2021-07-27 13:35:13.321",
      "dateStarted": "2021-08-04 15:58:36.926",
      "dateFinished": "2021-08-04 15:58:37.315",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show Tables",
      "text": "%spark.pyspark\n\nspark.catalog.listTables()",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:58:37.326",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[Table(name\u003d\u0027gaia_source\u0027, database\u003d\u0027gaiaedr3\u0027, description\u003dNone, tableType\u003d\u0027EXTERNAL\u0027, isTemporary\u003dFalse),\n Table(name\u003d\u0027gaia_source_allwise_best_neighbours\u0027, database\u003d\u0027gaiaedr3\u0027, description\u003dNone, tableType\u003d\u0027EXTERNAL\u0027, isTemporary\u003dFalse),\n Table(name\u003d\u0027gaia_source_ps1_best_neighbours\u0027, database\u003d\u0027gaiaedr3\u0027, description\u003dNone, tableType\u003d\u0027EXTERNAL\u0027, isTemporary\u003dFalse),\n Table(name\u003d\u0027gaia_source_tmasspsc_best_neighbours\u0027, database\u003d\u0027gaiaedr3\u0027, description\u003dNone, tableType\u003d\u0027EXTERNAL\u0027, isTemporary\u003dFalse),\n Table(name\u003d\u0027dcr_raw_sources\u0027, database\u003dNone, description\u003dNone, tableType\u003d\u0027TEMPORARY\u0027, isTemporary\u003dTrue)]"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1625581158073_12553115",
      "id": "20210706-141918_2051034386",
      "dateCreated": "2021-07-06 14:19:18.073",
      "dateStarted": "2021-08-04 15:58:37.381",
      "dateFinished": "2021-08-04 15:58:39.739",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show CAMD Unsorted",
      "text": "%spark.pyspark\n\ndef CAMD(passbands, catalogues, colors \u003d [\"k\", \u0027darkred\u0027, \u0027darkblue\u0027], ms \u003d 1, labels \u003d None, limit \u003d 10000):\n    \"\"\"plot an observational Hertzsprung-Russell diagram (aka colour / absolute magnitude diagram)\n    for the unclassified sample to show the problem,\n    include the photometric consistency filter to show the problem is astrometric in addition to photometric\"\"\"\n    \n    import matplotlib.pylab as plt\n    fig \u003d plt.figure(0, figsize \u003d (9.0, 9.0))\n    c \u003d -1\n\n    for i in catalogues:\n        c+\u003d1\n        if type(ms) \u003d\u003d list:\n            s \u003d ms[c]\n        else: s \u003d ms\n        if type(labels) \u003d\u003d type(None):\n            label \u003d i\n        else: label \u003d labels[c]\n        dat \u003d spark.sql(f\"SELECT phot_{passbands[0]}_mean_mag + 5.0*LOG10(parallax/100.0) AS m_{passbands[0]}, {passbands[1]} FROM {i} WHERE parallax \u003e 0  LIMIT {limit}\")\n        dat \u003d dat.select([\"g_rp\", \"m_g\"]).toPandas()\n        plt.scatter(dat[\u0027g_rp\u0027], -dat[\u0027m_g\u0027], marker \u003d \u0027.\u0027, s \u003d s, c \u003d colors[c], label \u003d label)\n    # plt.ylim(21.0, -3.0)\n    plt.ylabel(\"Stellar brightness (absolute G magnitude) --\u003e\", fontsize \u003d 16)\n    plt.xlabel(\"\u003c-- Stellar temperature (G - RP magnitude)\", fontsize \u003d 16)\n    lgnd \u003d plt.legend(fontsize \u003d 12, markerscale \u003d 1)\n    for i in range(len(catalogues)):\n        lgnd.legendHandles[i]._sizes \u003d [25]\n\nCAMD(passbands \u003d [\"g\", \"g_rp\"], catalogues \u003d [\"dcr_raw_sources\"], colors \u003d [\"k\"], limit \u003d 25000, labels \u003d [\u0027All Sources\u0027])",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:58:39.785",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cFigure size 648x648 with 1 Axes\u003e\n"
          },
          {
            "type": "IMG",
            "data": "\u003d\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1625584343844_983222154",
      "id": "20210706-151223_1219291343",
      "dateCreated": "2021-07-06 15:12:23.844",
      "dateStarted": "2021-08-04 15:58:39.828",
      "dateFinished": "2021-08-04 15:59:02.372",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Get HEALPix-6 Factor",
      "text": "%spark.pyspark\n\ndef healpix_level_N(source_id, level, constant \u003d False):\n    \u0027\u0027\u0027returns the HEALpix pixel from Gaia Source ID\u0027\u0027\u0027\n    if constant \u003d\u003d True:\n        return 2**35 * 4**(12-level)\n    else:    \n        return np.floor(source_id/(2**35 * 4**(12-level)))\n",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:59:02.456",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625583464651_751053772",
      "id": "20210706-145744_1307665902",
      "dateCreated": "2021-07-06 14:57:44.652",
      "dateStarted": "2021-08-04 15:59:02.490",
      "dateFinished": "2021-08-04 15:59:02.777",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Sort *\u0027Labelled\u0027* Training Data\n\n- Good data \u003d each HEALPix level-6 pixel that contains no sources with parallax_over_error \u003c −3.5.\n- Bad data \u003d parallax_over_error \u003c −4.5\n\n### With further split into SNR bins\n\n* High SNR \u003d parallax_over_error (SNR) \u003e 4.5\n* Low SNR \u003d -3.5 \u003c SNR \u003c 4.5",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:59:02.790",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eSort \u003cem\u003e\u0026lsquo;Labelled\u0026rsquo;\u003c/em\u003e Training Data\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003eGood data \u003d each HEALPix level-6 pixel that contains no sources with parallax_over_error \u0026lt; −3.5.\u003c/li\u003e\n  \u003cli\u003eBad data \u003d parallax_over_error \u0026lt; −4.5\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWith further split into SNR bins\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003eHigh SNR \u003d parallax_over_error (SNR) \u0026gt; 4.5\u003c/li\u003e\n  \u003cli\u003eLow SNR \u003d -3.5 \u0026lt; SNR \u0026lt; 4.5\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1625583467804_1982882647",
      "id": "20210706-145747_58341513",
      "dateCreated": "2021-07-06 14:57:47.804",
      "dateStarted": "2021-08-04 15:59:02.838",
      "dateFinished": "2021-08-04 15:59:02.854",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Define features",
      "text": "%spark.pyspark\n\nfactor \u003d healpix_level_N(source_id \u003d None, level \u003d 6, constant \u003d True)\n\ndef getFeatures(withPhotometric \u003d False):\n    # select features to use\n    features \u003d [\n        \u0027source_id\u0027, \u0027parallax_error\u0027, \u0027parallax_over_error\u0027,\n        \u0027pmra\u0027, \u0027astrometric_sigma5d_max\u0027, \u0027pmdec\u0027,\n        \u0027pmdec_error\u0027, \u0027pmra_error\u0027, \u0027astrometric_excess_noise\u0027,\n        \u0027visibility_periods_used\u0027, \u0027ruwe\u0027, \u0027astrometric_gof_al\u0027,\n        \u0027ipd_gof_harmonic_amplitude\u0027, \u0027ipd_frac_odd_win\u0027, \u0027ipd_frac_multi_peak\u0027,]\n        \n    if withPhotometric:\n        features.extend([\u0027m_g\u0027, \u0027g_rp\u0027])\n    \n    return features\n\nfeatures \u003d getFeatures()",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:59:02.938",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625839043312_909039022",
      "id": "20210709-135723_1861639683",
      "dateCreated": "2021-07-09 13:57:23.312",
      "dateStarted": "2021-08-04 15:59:02.971",
      "dateFinished": "2021-08-04 15:59:03.337",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Select Good or Bad Sources",
      "text": "%spark.pyspark\n\ndef select_bad_sources(table):\n    \u0027\u0027\u0027Selects bad sources from eDR3\u0027\u0027\u0027\n    \n    bad \u003d spark.sql(f\u0027SELECT a.* \\\n                    FROM {table} as a\\\n                    WHERE parallax_over_error \u003c -4.5\u0027)\n    # print(f\u0027{bad.count()} bad sources\u0027)\n    print(f\u0027Collected bad sources\u0027)\n    \n    return bad\n\ndef select_good_sources(table):\n    \u0027\u0027\u0027Selects good sources from eDR3\u0027\u0027\u0027\n    \n    good \u003d spark.sql(f\u0027SELECT a.* \\\n    FROM {table} as a \\\n    WHERE (a.parallax_over_error \u003e 4.5 AND (a.phot_g_mean_mag - a.phot_rp_mean_mag) \u003c1.8) \\\n    OR (a.parallax_over_error \u003c 4.5 AND a.parallax_over_error \u003e -3.0 AND \\\n    (a.phot_g_mean_mag - a.phot_rp_mean_mag) \u003c1.5)\u0027)\n    # print(f\u0027{good.count()} good sources\u0027)\n    print(f\u0027Collected Good sources\u0027)\n    return good\n\ndef with_flags(table, features \u003d \"*\"):\n    \u0027\u0027\u0027Collects data with an \"is_good\" flag for trianing NN\u0027\u0027\u0027\n    \n    # Select training data with flag for good or bad data.\n    good \u003d select_good_sources(table).select(features).withColumn(\u0027is_good\u0027, lit(1))\n    bad \u003d select_bad_sources(table).select(features).withColumn(\u0027is_good\u0027, lit(0))\n    \n    factor \u003d healpix_level_N(source_id \u003d None, level \u003d 6, constant \u003d True)\n    \n    # Join data with a column for |SNR|\n    df \u003d good.union(bad)\\\n                    .withColumn(\u0027abs_SNR\u0027, \n                                f.abs(col(\u0027parallax_over_error\u0027)))\\\n                    .withColumn(\u0027hpx6\u0027, floor(col(\u0027source_id\u0027)/factor))\n    print(\u0027DataBase with flags\u0027)\n    \n    return df",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:59:03.372",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625839042580_173330254",
      "id": "20210709-135722_1405384887",
      "dateCreated": "2021-07-09 13:57:22.580",
      "dateStarted": "2021-08-04 15:59:03.405",
      "dateFinished": "2021-08-04 15:59:03.589",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Drop Bad Pixels",
      "text": "%spark.pyspark\n\n# Total pixels \u003d 49,152 (Currently 10410 good??)\n\ndef drop_bad_pixels(data, all_sources):\n    \u0027\u0027\u0027drop good sources from HEALpix6 pixels that contain bad sources\u0027\u0027\u0027\n    \n    # Identify bad pixels\n    # bad_pixels \u003d set([int(i[0]) for i in df.filter(col(\u0027parallax_over_error\u0027) \u003c -3.0)\\\n    #                   .select(\u0027hpx6\u0027).toPandas().values])\n    \n    bad_pixels \u003d spark.sql(f\u0027SELECT FLOOR(a.source_id/{factor}) as hpx6 \\\n    FROM {all_sources} as a \\\n    WHERE (a.parallax_over_error \u003c - 3.5)\u0027).distinct()\n                      \n    # bad_pixels \u003d data.filter(col(\u0027parallax_over_error\u0027) \u003c -3.5).select(\u0027hpx6\u0027).distinct() # spark version of above\n\n    # Drop data from pixels that contain bad datapoints\n    # data \u003d data.filter((col(\u0027is_good\u0027) \u003d\u003d 0) | \n    #               ((col(\u0027is_good\u0027) \u003d\u003d 1) \u0026 \n    #                 (~data.hpx6.isin(bad_pixels))))\n    \n    bad \u003d data.filter((col(\u0027is_good\u0027) \u003d\u003d 0))\n    # Add bad.columns to ensure correct column order for join\n    good \u003d data.join(bad_pixels, \u0027hpx6\u0027, how \u003d \"left_anti\")[bad.columns]\n    \n    df \u003d good.union(bad)\n\n    # N_good_pixels \u003d data.select(\u0027hpx6\u0027).distinct()\n    return df\n\ndf \u003d with_flags(table \u003d \u0027dcr_raw_sources\u0027, features \u003d features)\ndf \u003d drop_bad_pixels(df, all_sources \u003d \u0027dcr_raw_sources\u0027)\ndf \u003d df.cache()\ndf.createOrReplaceTempView(\u0027dcr_data\u0027)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:59:03.605",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Collected Good sources\nCollected bad sources\nDataBase with flags\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1625839041704_-1227947627",
      "id": "20210709-135721_329827109",
      "dateCreated": "2021-07-09 13:57:21.704",
      "dateStarted": "2021-08-04 15:59:03.653",
      "dateFinished": "2021-08-04 15:59:04.623",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n# df.filter(col(\u0027is_good\u0027) \u003d\u003d 0).count()\n\n# Total size of training data\n# EDR3: [11,207,747 / 4,180,244] sources [Good/Bad] (NO limit)\n# EDR3: [5,548,695  / 4,180,244] sources [Good/Bad] (\u003c1 kpcs)\n# EDR3: [1,472,930  / 4,180,244] sources [Good/Bad] (\u003c0.1 kpcs) [45 minutes to train]",
      "user": "dcr",
      "dateUpdated": "2021-08-04 16:00:36.084",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1627901313622_23704750",
      "id": "20210802-104833_2004095152",
      "dateCreated": "2021-08-02 10:48:33.623",
      "dateStarted": "2021-08-04 16:00:36.127",
      "dateFinished": "2021-08-04 16:00:36.227",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n# df.count()",
      "user": "dcr",
      "dateUpdated": "2021-08-04 16:00:39.515",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1628005460926_503859733",
      "id": "20210803-154420_1246365516",
      "dateCreated": "2021-08-03 15:44:20.926",
      "dateStarted": "2021-08-04 16:00:39.557",
      "dateFinished": "2021-08-04 16:00:39.688",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\ndf.createOrReplaceTempView(\u0027dcr_training_sources\u0027)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 16:00:43.657",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1628084610447_-577743844",
      "id": "20210804-134330_1534317830",
      "dateCreated": "2021-08-04 13:43:30.447",
      "dateStarted": "2021-08-04 16:00:43.692",
      "dateFinished": "2021-08-04 16:00:43.790",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Spacial Distribution",
      "text": "%spark.pyspark\ndef spacialDistributionSubplot(class_val \u003d 0, label \u003d None, limit \u003d None, labelCol \u003d \u0027label\u0027, color \u003d \u0027k\u0027, save \u003d False):\n\n    plt.figure(3, figsize \u003d (16.18, 10.0))\n    \n    dat \u003d spark.sql(f\u0027SELECT b.is_good, a.ra, a.dec FROM gaia_source as a, \\\n                                                 dcr_training_sources as b \\\n                                                 WHERE a.source_id \u003d b.source_id LIMIT {limit}\u0027)\n    dat \u003d dat.withColumn(\u0027raProj\u0027, (col(\u0027ra\u0027) - 180.0) * np.pi / 180.0)\\\n                .withColumn(\u0027decProj\u0027, (col(\u0027dec\u0027) * np.pi / 180.0))\\\n                    .select([\u0027raProj\u0027, \u0027decProj\u0027, \u0027is_good\u0027])\\\n                        .toPandas()\n    \n    print(\u0027data in Pandas\u0027)\n    for i, value in enumerate(class_val):\n        tmp \u003d dat[dat[\u0027is_good\u0027] \u003d\u003d value]\n        plt.subplot(1,2,i+1, projection\u003d\u0027aitoff\u0027)\n        plt.grid(True)\n        plt.title(f\u0027{label[i]}\u0027)\n        plt.scatter(tmp[\u0027raProj\u0027], tmp[\u0027decProj\u0027], marker \u003d \u0027.\u0027, s \u003d 1, c \u003d color[i])\n    if save:\n        savefigs(save)\n    plt.show()\n    \nspacialDistributionSubplot(class_val \u003d [1,0], label \u003d [\u0027Good Sources\u0027, \u0027Bad Sources\u0027], \n                    color \u003d [\u0027k\u0027, \u0027darkred\u0027], limit \u003d 10000, labelCol \u003d \u0027is_good\u0027)\n\n",
      "user": "dcr",
      "dateUpdated": "2021-08-04 16:01:07.247",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mPy4JJavaError\u001b[0m                             Traceback (most recent call last)\n\u001b[0;32m/tmp/ipykernel_1559/58861074.py\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m spacialDistributionSubplot(class_val \u003d [1,0], label \u003d [\u0027Good Sources\u0027, \u0027Bad Sources\u0027], \n\u001b[0;32m---\u003e 25\u001b[0;31m                     color \u003d [\u0027k\u0027, \u0027darkred\u0027], limit \u003d 10000, labelCol \u003d \u0027is_good\u0027)\n\u001b[0m\n\u001b[0;32m/tmp/ipykernel_1559/58861074.py\u001b[0m in \u001b[0;36mspacialDistributionSubplot\u001b[0;34m(class_val, label, limit, labelCol, color, save)\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0mdat\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mdat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwithColumn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u0027raProj\u0027\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u0027ra\u0027\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m180.0\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpi\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m180.0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m                 \u001b[0;34m.\u001b[0m\u001b[0mwithColumn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u0027decProj\u0027\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u0027dec\u0027\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpi\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m180.0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 10\u001b[0;31m                     \u001b[0;34m.\u001b[0m\u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\u0027raProj\u0027\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\u0027decProj\u0027\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\u0027is_good\u0027\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;31m\\\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m                         \u001b[0;34m.\u001b[0m\u001b[0mtoPandas\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/spark/python/lib/pyspark.zip/pyspark/sql/dataframe.py\u001b[0m in \u001b[0;36mtoPandas\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   2153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2154\u001b[0m         \u001b[0;31m# Below is toPandas without Arrow optimization.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 2155\u001b[0;31m         \u001b[0mpdf\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_records\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcollect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m\u003d\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2156\u001b[0m         \u001b[0mcolumn_counter\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mCounter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2157\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/spark/python/lib/pyspark.zip/pyspark/sql/dataframe.py\u001b[0m in \u001b[0;36mcollect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    533\u001b[0m         \"\"\"\n\u001b[1;32m    534\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mSCCallSiteSync\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sc\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcss\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 535\u001b[0;31m             \u001b[0msock_info\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcollectToPython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    536\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_load_from_socket\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msock_info\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mBatchedSerializer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mPickleSerializer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    537\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1255\u001b[0m         \u001b[0manswer\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1256\u001b[0m         return_value \u003d get_return_value(\n\u001b[0;32m-\u003e 1257\u001b[0;31m             answer, self.gateway_client, self.target_id, self.name)\n\u001b[0m\u001b[1;32m   1258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1259\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mtemp_arg\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtemp_args\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/spark/python/lib/pyspark.zip/pyspark/sql/utils.py\u001b[0m in \u001b[0;36mdeco\u001b[0;34m(*a, **kw)\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mdeco\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 63\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     64\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mpy4j\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprotocol\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPy4JJavaError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     65\u001b[0m             \u001b[0ms\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjava_exception\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoString\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/spark/python/lib/py4j-0.10.7-src.zip/py4j/protocol.py\u001b[0m in \u001b[0;36mget_return_value\u001b[0;34m(answer, gateway_client, target_id, name)\u001b[0m\n\u001b[1;32m    326\u001b[0m                 raise Py4JJavaError(\n\u001b[1;32m    327\u001b[0m                     \u001b[0;34m\"An error occurred while calling {0}{1}{2}.\\n\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 328\u001b[0;31m                     format(target_id, \".\", name), value)\n\u001b[0m\u001b[1;32m    329\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    330\u001b[0m                 raise Py4JError(\n\n\u001b[0;31mPy4JJavaError\u001b[0m: An error occurred while calling o330.collectToPython.\n: org.apache.spark.SparkException: Job aborted due to stage failure: Task 8 in stage 20.0 failed 4 times, most recent failure: Lost task 8.3 in stage 20.0 (TID 6495, worker06, executor 23): java.io.FileNotFoundException: /mnt/local/vda/hadoop/data/usercache/fedora/appcache/application_1628085720806_0004/blockmgr-35be1c9b-51ff-4456-9773-ebc48bf0ed48/2b/temp_shuffle_1458252b-e516-48bb-95b2-def8f759dda7 (No space left on device)\n\tat java.io.FileOutputStream.open0(Native Method)\n\tat java.io.FileOutputStream.open(FileOutputStream.java:270)\n\tat java.io.FileOutputStream.\u003cinit\u003e(FileOutputStream.java:213)\n\tat org.apache.spark.storage.DiskBlockObjectWriter.initialize(DiskBlockObjectWriter.scala:103)\n\tat org.apache.spark.storage.DiskBlockObjectWriter.open(DiskBlockObjectWriter.scala:116)\n\tat org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:237)\n\tat org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:151)\n\tat org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)\n\tat org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:55)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:123)\n\tat org.apache.spark.executor.Executor$TaskRunner$$anonfun$10.apply(Executor.scala:408)\n\tat org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1360)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:414)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n\nDriver stacktrace:\n\tat org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1925)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1913)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1912)\n\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1912)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:948)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:948)\n\tat scala.Option.foreach(Option.scala:257)\n\tat org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:948)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:2146)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2095)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:2084)\n\tat org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:49)\n\tat org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:759)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2061)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2082)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2101)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:2126)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1.apply(RDD.scala:990)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)\n\tat org.apache.spark.rdd.RDD.withScope(RDD.scala:385)\n\tat org.apache.spark.rdd.RDD.collect(RDD.scala:989)\n\tat org.apache.spark.sql.execution.SparkPlan.executeCollect(SparkPlan.scala:299)\n\tat org.apache.spark.sql.Dataset$$anonfun$collectToPython$1.apply(Dataset.scala:3263)\n\tat org.apache.spark.sql.Dataset$$anonfun$collectToPython$1.apply(Dataset.scala:3260)\n\tat org.apache.spark.sql.Dataset$$anonfun$52.apply(Dataset.scala:3370)\n\tat org.apache.spark.sql.execution.SQLExecution$$anonfun$withNewExecutionId$1.apply(SQLExecution.scala:80)\n\tat org.apache.spark.sql.execution.SQLExecution$.withSQLConfPropagated(SQLExecution.scala:127)\n\tat org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:75)\n\tat org.apache.spark.sql.Dataset.org$apache$spark$sql$Dataset$$withAction(Dataset.scala:3369)\n\tat org.apache.spark.sql.Dataset.collectToPython(Dataset.scala:3260)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:282)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:238)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.io.FileNotFoundException: /mnt/local/vda/hadoop/data/usercache/fedora/appcache/application_1628085720806_0004/blockmgr-35be1c9b-51ff-4456-9773-ebc48bf0ed48/2b/temp_shuffle_1458252b-e516-48bb-95b2-def8f759dda7 (No space left on device)\n\tat java.io.FileOutputStream.open0(Native Method)\n\tat java.io.FileOutputStream.open(FileOutputStream.java:270)\n\tat java.io.FileOutputStream.\u003cinit\u003e(FileOutputStream.java:213)\n\tat org.apache.spark.storage.DiskBlockObjectWriter.initialize(DiskBlockObjectWriter.scala:103)\n\tat org.apache.spark.storage.DiskBlockObjectWriter.open(DiskBlockObjectWriter.scala:116)\n\tat org.apache.spark.storage.DiskBlockObjectWriter.write(DiskBlockObjectWriter.scala:237)\n\tat org.apache.spark.shuffle.sort.BypassMergeSortShuffleWriter.write(BypassMergeSortShuffleWriter.java:151)\n\tat org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:99)\n\tat org.apache.spark.scheduler.ShuffleMapTask.runTask(ShuffleMapTask.scala:55)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:123)\n\tat org.apache.spark.executor.Executor$TaskRunner$$anonfun$10.apply(Executor.scala:408)\n\tat org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1360)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:414)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\t... 1 more\n\u003cFigure size 1164.96x720 with 0 Axes\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1628076430026_1185499204",
      "id": "20210804-112710_1814993011",
      "dateCreated": "2021-08-04 11:27:10.026",
      "dateStarted": "2021-08-04 16:01:07.284",
      "dateFinished": "2021-08-04 16:01:09.665",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# Regimes:\n\n### Low |SNR|\n* |SNR| \u003c 4.5 but training data omits data with |SNR| \u003c 4.5 to prevent the imbalance in coverage of SNR-space in the good and bad training sets from impacting our classifications in the low-SNR regime.\n* Does not include |SNR| as a feature.\n\n### High |SNR|\n* Uses the entire training set",
      "user": "dcr",
      "dateUpdated": "2021-08-03 16:18:11.677",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "title": false,
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eRegimes:\u003c/h1\u003e\n\u003ch3\u003eLow |SNR|\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e|SNR| \u0026lt; 4.5 but training data omits data with |SNR| \u0026lt; 4.5 to prevent the imbalance in coverage of SNR-space in the good and bad training sets from impacting our classifications in the low-SNR regime.\u003c/li\u003e\n  \u003cli\u003eDoes not include |SNR| as a feature.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eHigh |SNR|\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003eUses the entire training set\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1625839040493_-1840563787",
      "id": "20210709-135720_1210777367",
      "dateCreated": "2021-07-09 13:57:20.493",
      "dateStarted": "2021-08-03 16:18:11.756",
      "dateFinished": "2021-08-03 16:18:11.768",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Return correct data for regime",
      "text": "%spark.pyspark\n\ndef return_low_snr(df, features \u003d \u0027*\u0027):\n    \u0027\u0027\u0027Creates low SNR training dataset. (-3.5 \u003c SNR \u003c 4.5)\n    This dataset does not include parallax over error as a training feature\n    Counter intuitively, this dataset only includes data with |SNR| \u003e 4.5.\u0027\u0027\u0027\n    df \u003d df.select(features)\\\n                .filter((col(\u0027abs_SNR\u0027) \u003e 4.5) | (col(\u0027is_good\u0027) \u003d\u003d 0))\n    \n#     print(f\u0027 Low SNR dataset contains {df.filter(df.is_good \u003d\u003d 1).count()} \\\n# \"good\" data points and {df.filter(df.is_good \u003d\u003d 0).count()} \"bad\" datapoints.\u0027)\n    print(\u0027Low SNR dataset returned\u0027)\n    return df\n\ndef return_high_snr(df, features \u003d \u0027*\u0027):\n    \u0027\u0027\u0027Creates high SNR training dataset. (|SNR| \u003e 4.5)\n    This dataset does include parallax over error as a training feature.\u0027\u0027\u0027\n    \n#     print(f\u0027High SNR dataset contains {df.filter(df.is_good \u003d\u003d 1).count()} \\\n# \"good\" data points and {df.filter(df.is_good \u003d\u003d 0).count()} \"bad\" datapoints.\u0027)\n    print(\u0027High SNR dataset returned\u0027)\n    \n    return df.select(features)\n",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:19:06.209",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625839712240_-357687631",
      "id": "20210709-140832_772076010",
      "dateCreated": "2021-07-09 14:08:32.240",
      "dateStarted": "2021-08-04 15:22:00.553",
      "dateFinished": "2021-08-04 15:22:00.857",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Split into Train and Test Data",
      "text": "%spark.pyspark\n\ndef split_data(data, split \u003d 0.2, seed \u003d 42):\n    \u0027\u0027\u0027Splits a SQL.DataFrame into independent training and test datasets\u0027\u0027\u0027\n    \n    return data.randomSplit([1-split, split], seed)\n\ndef get_training_data(df, regime, split \u003d 0.2, seed \u003d 42,):\n    \u0027\u0027\u0027returns tuple of DataFrames of training and test data \n       for either High SNR or Low SNR regimes.\u0027\u0027\u0027\n    if \u0027high\u0027 in regime:\n        df \u003d return_high_snr(df)\n        \n    elif \u0027low\u0027 in regime:\n        df \u003d return_low_snr(df)\n        \n    else: raise NameError(\u0027regime is either \"high\" or \"low\"\u0027)\n    return split_data(df, split, seed)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:19:07.330",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625839720004_956296500",
      "id": "20210709-140840_427510120",
      "dateCreated": "2021-07-09 14:08:40.004",
      "dateStarted": "2021-08-04 15:22:00.891",
      "dateFinished": "2021-08-04 15:22:01.044",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Select Training Features",
      "text": "%spark.pyspark\n\ndef select_training_features(df, regime):\n    \u0027\u0027\u0027selects correct features for the given regime\u0027\u0027\u0027\n    \n    features \u003d [i for i in df.columns if i not in [\u0027source_id\u0027, \u0027parallax_over_error\u0027, \n                                                   \u0027is_good\u0027, \u0027hpx6\u0027, \u0027m_g\u0027, \u0027g_rp\u0027]]\n    \n    if \u0027low\u0027 in regime:\n        features.remove(\u0027abs_SNR\u0027)\n    elif not \u0027high\u0027 in regime: raise NameError(\u0027regime is either \"high\" or \"low\"\u0027)\n    return features",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:19:09.379",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625839721950_-37165482",
      "id": "20210709-140841_1557013711",
      "dateCreated": "2021-07-09 14:08:41.950",
      "dateStarted": "2021-08-04 15:22:01.084",
      "dateFinished": "2021-08-04 15:22:01.110",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n# Normalization\n",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:19:10.356",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eNormalization\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1625839841769_2030826874",
      "id": "20210709-141041_2000243903",
      "dateCreated": "2021-07-09 14:10:41.769",
      "dateStarted": "2021-08-04 15:19:10.357",
      "dateFinished": "2021-08-04 15:19:10.365",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "getScaler",
      "text": "%spark.pyspark\n\ndef getScaler(scalerType):\n    \u0027\u0027\u0027Returns correct scaler for chosen normalization.\u0027\u0027\u0027\n    \n    if scalerType \u003d\u003d \u0027standard\u0027: \n        from pyspark.ml.feature import StandardScaler\n        Scaler \u003d StandardScaler(withMean\u003dTrue, withStd \u003d True)\n    elif scalerType \u003d\u003d \u0027MinMax\u0027:\n        from pyspark.ml.feature import MinMaxScaler\n        Scaler \u003d MinMaxScaler()\n    else: raise NameError(f\u0027scalerType can be either \"MinMax\" or \"standard\" not {scaler}\u0027)\n    return Scaler\n\n\ndef getScalerModel(df, scalerType \u003d \u0027standard\u0027, featuresCol \u003d \u0027features\u0027,\n                       outCol \u003d \u0027norm_features\u0027, save \u003d False):\n    \u0027\u0027\u0027normalizes DenseVectors for MLlib\u0027\u0027\u0027\n\n    scaler \u003d getScaler(scalerType \u003d scalerType) # Get scaler\n    scaler.setInputCol(featuresCol)         # Set feature column name\n    scaler.setOutputCol(outCol)\n    model \u003d scaler.fit(df)\n    if save:\n        model.save(f\u0027{save}/{scalerType}_normalisation_model\u0027)\n        print(f\u0027Normalisation model saved at \"{save}/{scalerType}_normalisation_model\"\u0027)\n    return model\n\ndef normaliseData(df, model,):\n    \u0027\u0027\u0027normalizes featureCol of df using model from \"getScalerModel\" \u0027\u0027\u0027\n\n    return model.transform(df)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:19:13.259",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1626107486964_960926674",
      "id": "20210712-163126_1792127427",
      "dateCreated": "2021-07-12 16:31:26.964",
      "dateStarted": "2021-08-04 15:22:01.146",
      "dateFinished": "2021-08-04 15:22:01.265",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Build the Model",
      "text": "%spark.pyspark\n\ndef dataSparkML(df, regime, labelCol \u003d \u0027labels\u0027, featuresCol \u003d \u0027features\u0027, \n                normalise \u003d False, scalerType \u003d \u0027standard\u0027, save \u003d False):\n    \u0027\u0027\u0027get train and test dataset for input using pyspark.ml\u0027\u0027\u0027\n\n    # Get data and label columns for the selected regime\n    data  \u003d get_training_data(df, regime \u003d regime)\n    train_features \u003d select_training_features(data[0], regime \u003d regime)\n    N_features \u003d len(train_features)\n    # Assemble assember to merge features into DenseVector\n    assembler \u003d VectorAssembler(inputCols\u003dtrain_features,\n                                outputCol\u003dfeaturesCol)\n    \n    \n    train \u003d assembler.transform(data[0])\\\n                .select([\u0027source_id\u0027, featuresCol, labelCol])\n    test  \u003d assembler.transform(data[1])\\\n                .select([\u0027source_id\u0027, featuresCol, labelCol])\n    \n    if normalise:\n        # We rename featuresCol to maintain col name for later analysis\n        model \u003d getScalerModel(train.withColumnRenamed(featuresCol, \u0027inputFeatures\u0027),\n                               scalerType \u003d scalerType, featuresCol \u003d \u0027inputFeatures\u0027, \n                               outCol \u003d featuresCol, save \u003d save)\n        \n        # Normalise each dataset with the training data distributions\n        train \u003d normaliseData(train.withColumnRenamed(featuresCol, \u0027inputFeatures\u0027), model)\n        test  \u003d normaliseData( test.withColumnRenamed(featuresCol, \u0027inputFeatures\u0027), model)\n        \n        print(f\u0027Training data \u003d {train.count()} sources\u0027)\n    \n    return (train, test, N_features)\n\n# train,test, N_features, model \u003d dataSparkML(df, regime \u003d \u0027low\u0027, labelCol \u003d \u0027is_good\u0027, normalise \u003d True)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:19:14.107",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625839841352_1320842855",
      "id": "20210709-141041_25617336",
      "dateCreated": "2021-07-09 14:10:41.352",
      "dateStarted": "2021-08-04 15:22:01.305",
      "dateFinished": "2021-08-04 15:22:01.430",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "MLlib_confusion_matrix",
      "text": "%spark.pyspark\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pylab as plt\nfrom collections import Counter\n\nclass MLlib_confusion_matrix():\n    \u0027\u0027\u0027subclass to plot confusion matrix\u0027\u0027\u0027\n    def __init__(self, df, labelCol \u003d \u0027label\u0027, classes \u003d None, normalize \u003d True):\n        self.df               \u003d df\n        self.getLabelCol      \u003d labelCol\n        self.grouped          \u003d df.groupBy(labelCol, \u0027prediction\u0027).count().toPandas()\n        self.matrix           \u003d self.getConfusionMatrix()\n        self.normMatrix       \u003d self.getNormConfusionMatrix()\n        self.confusion_matrix \u003d self.confusionMatrix(classes, normalize)\n\n    def __repr__(self) : return f\"\"\"Class for plotting confusion matrix {self.normMatrix}\"\"\"\n\n    def getConfusionMatrix(self):\n        \u0027\u0027\u0027returns confusion matrix based on values\u0027\u0027\u0027\n\n        N_classes \u003d len(set(self.grouped[self.getLabelCol]))\n        matrix \u003d np.empty((N_classes, N_classes))\n        for i in range(N_classes):\n            for j in range(N_classes):\n                c \u003d self.grouped[(self.grouped[self.getLabelCol] \u003d\u003d i) \u0026 \n                                 (self.grouped.prediction \u003d\u003d j)][\u0027count\u0027].values\n                if len(c) \u003d\u003d 0:\n                    c \u003d 0 \n                matrix[i][j] \u003d  c\n        return matrix\n\n    def getNormConfusionMatrix(self):\n        \u0027\u0027\u0027returns confusion matrix based on values\u0027\u0027\u0027\n\n        N_classes \u003d len(set(self.grouped[self.getLabelCol]))\n        matrix \u003d np.empty((N_classes, N_classes))\n        for i in range(N_classes):\n            for j in range(N_classes):\n                c \u003d self.grouped[(self.grouped[self.getLabelCol] \u003d\u003d i) \u0026 \n                        (self.grouped.prediction \u003d\u003d j)][\u0027count\u0027].values\\\n                            /sum(self.grouped[(self.grouped[self.getLabelCol] \u003d\u003d i)][\u0027count\u0027])\n                if len(c) \u003d\u003d 0:\n                    c \u003d 0 \n                matrix[i][j] \u003d  np.round(c , 4)\n        return matrix\n    \n    def confusionMatrix(self, classes \u003d None, normalize \u003d True):\n        \u0027\u0027\u0027prints rich version of confusion matrix\u0027\u0027\u0027\n\n        if normalize: matrix \u003d self.normMatrix\n        else: matrix \u003d self.matrix\n        if classes \u003d\u003d None:\n            classes \u003d range(len(matrix))\n\n        N_classes \u003d range(len(classes))\n        plt.rcParams[\u0027figure.figsize\u0027] \u003d (6,6)\n\n        plt.imshow(matrix, cmap \u003d \u0027Greens\u0027, alpha \u003d 0.75)\n        for i in N_classes: # Add values to max pooling\n            for j in N_classes:\n                text \u003d plt.text(j, i, matrix[i][j],\n                               ha\u003d\"center\", va\u003d\"center\", color\u003d\"k\", fontsize \u003d 20)\n\n        #Add thick line to matrix\n        axis \u003d plt.gca()\n        axis.set_yticks(np.arange(-0.5, len(classes)-0.5, 1), minor\u003d\u0027True\u0027)\n        axis.set_xticks(np.arange(-0.5, len(classes)-0.5, 1), minor\u003d\u0027True\u0027)\n        axis.yaxis.grid(True, which\u003d\u0027minor\u0027, color \u003d \u0027k\u0027, lw \u003d 2)\n        axis.xaxis.grid(True, which\u003d\u0027minor\u0027, color \u003d \u0027k\u0027, lw \u003d 2)\n        plt.xticks(N_classes, classes, rotation \u003d0, fontsize \u003d 14)\n        plt.yticks(N_classes, classes, rotation \u003d0, fontsize \u003d 14)\n        plt.xlabel(\u0027Predicted Class\u0027, fontsize \u003d 16)\n        plt.ylabel(\u0027True Class\u0027, fontsize \u003d 16)\n        \n        \nclass MLlibMultiClassEvaluator(MLlib_confusion_matrix):\n    \u0027\u0027\u0027class to calculate parameters of NN performance for binary classification\u0027\u0027\u0027\n    \n    def __init__(self, df, labelCol \u003d \u0027label\u0027):\n        self.df            \u003d df\n        self.getLabelCol   \u003d labelCol\n        self.show          \u003d df.show\n        # self.count         \u003d df.count\n        # self.shape         \u003d (df.count(), len(df.columns))\n        # self.grouped       \u003d df.groupBy(labelCol, \u0027prediction\u0027).count().toPandas()\n        self.matrix        \u003d self.getConfusionMatrix()\n        \n    # def __len__(self)         : return self.df.count()\n    # def __repr__(self)        : return f\"\"\"Evaluate ML performance for {len(self)} datapoints.\"\"\"\n    \n    def getAnalysis(self):\n        \u0027\u0027\u0027returns a pd.DataFrame for analysis\u0027\u0027\u0027\n        data \u003d self.df.select(self.getLabelCol,\u0027probability\u0027, \u0027prediction\u0027).toPandas()\n        for i in range(max(data[self.getLabelCol])+1):\n            data[f\u0027prob\u0027] \u003d [max(j) for j in data.probability]\n        return data\n    \n    def getTruePositives(self, step \u003d np.arange(0.0, 0.95, 0.01)):\n        \u0027\u0027\u0027calculates how True Positives change by threshold\u0027\u0027\u0027\n        conMat \u003d self.getConfusionMatrix()\n        data \u003d self.getAnalysis()\n        tp \u003d {}\n        for cat in range(len(conMat)):\n            tp[cat] \u003d []\n        for cat in range(len(conMat)):\n            for threshold in step:\n                tmp \u003d Counter(data[(data[\u0027prediction\u0027] \u003d\u003d data[self.getLabelCol]) \u0026 \n                                   (data[f\u0027prob\u0027]\u003ethreshold)][self.getLabelCol])\n                for cat in range(len(conMat)):\n                    tp[cat].append(tmp[cat])\n            return tp\n        \n        \n    def getFalsePositives(self, step \u003d np.arange(0.0, 0.95, 0.01)):\n        \u0027\u0027\u0027calculates how True Positives change by threshold\u0027\u0027\u0027\n        conMat \u003d self.getConfusionMatrix()\n        data \u003d self.getAnalysis()\n        fp \u003d {}\n        for cat in range(len(conMat)):\n            fp[cat] \u003d []\n        for cat in range(len(conMat)):\n            for threshold in step:\n                tmp \u003d Counter(data[(data[\u0027prediction\u0027] !\u003d data[self.getLabelCol]) \u0026 \n                                   (data[f\u0027prob\u0027]\u003ethreshold)].prediction)\n                for cat in range(len(conMat)):\n                    fp[cat].append(tmp[cat])\n            return fp        \n        \n    def getFalseNegatives(self, step \u003d np.arange(0.0, 0.95, 0.01)):\n        \u0027\u0027\u0027calculates how False Positives change by threshold\u0027\u0027\u0027\n        conMat \u003d self.getConfusionMatrix()\n        data \u003d self.getAnalysis()\n        fn \u003d {}\n        for cat in range(len(conMat)):\n            fn[cat] \u003d []\n        for cat in range(len(conMat)):\n            for threshold in step:\n                tmp \u003d Counter(data[(data[\u0027prediction\u0027] !\u003d data[self.getLabelCol]) \u0026 \n                                   (data[f\u0027prob\u0027]\u003ethreshold)][self.getLabelCol])\n                for cat in range(len(conMat)):\n                    fn[cat].append(tmp[cat])\n            return fn\n        \n    def getPrecision(self, step \u003d np.arange(0.0, 0.95, 0.01)):\n        \u0027\u0027\u0027calculate precision\u0027\u0027\u0027\n        precision \u003d {}; true_positives \u003d self.getTruePositives(step); \n        false_positives \u003d self.getFalsePositives(step)\n        conMat \u003d self.getConfusionMatrix()\n        precision \u003d {}\n        for cat in range(len(conMat)):\n            precision[cat] \u003d conMat[cat][cat]\n            for cat in range(len(conMat)):\n                precision[cat] \u003d [tp / (tp+fp) for tp, fp in zip(true_positives[cat],false_positives[cat])]\n        return precision\n    \n    def getRecall(self, step \u003d np.arange(0.0, 0.95, 0.01)):\n        \u0027\u0027\u0027calculate recall\u0027\u0027\u0027\n        conMat \u003d self.getConfusionMatrix()\n        recall \u003d {}; true_positives \u003d self.getTruePositives(step); \n        false_negatives \u003d self.getFalseNegatives(step)\n        for cat in range(len(conMat)):\n            recall[cat] \u003d []\n            for cat in range(len(conMat)):\n                recall[cat] \u003d [tp / (tp+fn) for tp, fn in zip(true_positives[cat],false_negatives[cat])]\n        return recall\n    \n    \nclass plottingThreshold(MLlibMultiClassEvaluator):\n    \u0027\u0027\u0027subclass of \"threshold\" for various plots of useful threshold parameters.\u0027\u0027\u0027\n    \n    def __repr__(self): return f\"\"\"Plotting software for \u0027threshold\u0027 objects\"\"\"\n    def __init__(self, df, labelCol \u003d \u0027label\u0027):\n        self.df            \u003d df\n        self.getLabelCol   \u003d labelCol\n        self.show          \u003d df.show\n        # self.count         \u003d df.count\n        # self.shape         \u003d (df.count(), len(df.columns))\n        self.grouped       \u003d df.groupBy(labelCol, \u0027prediction\u0027).count().toPandas()\n        self.matrix        \u003d self.getConfusionMatrix()\n        \n        \n    def getAxes(self,ax):\n        if ax \u003d\u003d None:\n            ax \u003d plt.subplot(111)\n        return ax\n\n    def plot_true_positives(self, ax \u003d None, step \u003d np.arange(0.0, 0.95, 0.01), normalize \u003d True, legend \u003d True):\n        ax \u003d self.getAxes(ax); true_positives \u003d self.getTruePositives(step); \n        conMat \u003d self.getConfusionMatrix()\n        for cat in range(len(conMat)):\n            if normalize \u003d\u003d True:\n                y \u003d [i/max(true_positives[cat]) for i in true_positives[cat]]\n                ax.set_ylabel(\u0027Fraction of Total True Positives --\u003e\u0027)\n            else:\n                y \u003d [i/len(self.data[self.data.true_label \u003d\u003d cat]) for i in true_positives[cat]]\n                ax.set_ylabel(\u0027True Positives --\u003e\u0027)\n            ax.plot(step, y, label \u003d cat)\n        if legend:\n            ax.legend()\n        ax.grid(\u0027on\u0027)\n        ax.set_xlabel(\u0027Threshold\u0027)\n\n    def plot_false_positives(self, ax \u003d None, step \u003d np.arange(0.0, 0.95, 0.01), legend \u003d True):\n        ax \u003d self.getAxes(ax); false_positives \u003d self.getFalsePositives(step)\n        conMat \u003d self.getConfusionMatrix()\n        for cat in range(len(conMat)):\n            if max(false_positives[cat]) !\u003d 0:\n                y \u003d [i/max(false_positives[cat]) for i in false_positives[cat]]\n            else: y \u003d [i for i in false_positives[cat]]\n            ax.plot(step, y, label \u003d cat)\n        if legend:\n            ax.legend()\n        ax.grid(\u0027on\u0027)\n        ax.set_xlabel(\u0027Threshold\u0027)\n        ax.set_ylabel(\u0027\u003c-- Fraction of Total False Positives\u0027)\n\n    def plot_precision(self, ax \u003d None, step \u003d np.arange(0.0, 0.95, 0.01), legend \u003d True):\n        ax \u003d self.getAxes(ax); precision \u003d self.getPrecision(step)\n        conMat \u003d self.getConfusionMatrix()\n        for cat in range(len(conMat)):\n            y \u003d precision[cat]\n            ax.plot(step, y, label \u003d cat)\n        if legend:\n            ax.legend()\n        ax.grid(\u0027on\u0027)\n        ax.set_xlabel(\u0027Threshold\u0027)\n        ax.set_ylabel(\u0027Precision --\u003e\u0027)\n\n    def plot_recall(self, ax \u003d None, step \u003d np.arange(0.0, 0.95, 0.01), legend \u003d True):\n        ax \u003d self.getAxes(ax); recall \u003d self.getRecall(step)\n        conMat \u003d self.getConfusionMatrix()\n        for cat in range(len(conMat)):\n            y \u003d recall[cat]\n            ax.plot(step, y, label \u003d cat)\n        if legend:\n            ax.legend()\n        ax.grid(\u0027on\u0027)\n        ax.set_xlabel(\u0027Threshold\u0027)\n        ax.set_ylabel(\u0027Recall --\u003e\u0027)\n        \n\n    def threshold_subplots(self, step \u003d np.arange(0.0, 0.95, 0.01), figsize\u003d(15, 8)):\n        import matplotlib.gridspec as gridspec\n        fig \u003d plt.figure(figsize \u003d figsize)\n        gs \u003d gridspec.GridSpec(ncols\u003d2, nrows\u003d2, figure\u003dfig)\n        ax1 \u003d fig.add_subplot(gs[0, 0])\n        ax2 \u003d fig.add_subplot(gs[0, 1])\n        ax3 \u003d fig.add_subplot(gs[1, 0])\n        ax4 \u003d fig.add_subplot(gs[1, 1])\n\n        axs \u003d [ax1, ax2, ax3, ax4]\n        self.plot_precision      (ax \u003d axs[0], step \u003d step, legend \u003d False)\n        self.plot_recall         (ax \u003d axs[1], step \u003d step, legend \u003d False)\n        self.plot_true_positives (ax \u003d axs[2], step \u003d step, legend \u003d True )\n        self.plot_false_positives(ax \u003d axs[3], step \u003d step, legend \u003d True )\n        plt.tight_layout()",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:19:16.319",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625583466178_2136528193",
      "id": "20210706-145746_766891138",
      "dateCreated": "2021-07-06 14:57:46.178",
      "dateStarted": "2021-08-04 15:22:01.462",
      "dateFinished": "2021-08-04 15:22:01.649",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\nsqlContext.clearCache()",
      "user": "dcr",
      "dateUpdated": "2021-08-04 16:02:50.270",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1628092966330_500712733",
      "id": "20210804-160246_1472830535",
      "dateCreated": "2021-08-04 16:02:46.330",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Train the model",
      "text": "%spark.pyspark\n\ndef nnTrainModel(df, regime, labelCol \u003d \u0027label\u0027,\n                 featuresCol \u003d \u0027features\u0027,\n                 scalerType \u003d \u0027standard\u0027, save \u003d False, \n                 normalise \u003d False):\n    \u0027\u0027\u0027trains a neural network using sparkML\u0027\u0027\u0027\n    \n    # get train, test and N_features \n    train, test, \\\n        N_features \u003d dataSparkML(df \u003d df, regime \u003d regime, labelCol \u003d labelCol, \n                                 normalise \u003d normalise, featuresCol \u003d featuresCol,\n                                 save \u003d save, scalerType \u003d scalerType)\n    \n    # specify layers for the neural network:\n    layers \u003d [N_features, 64, 64, 64, 64, 2]\n\n    # create the trainer and set its parameters\n    trainer \u003d MultilayerPerceptronClassifier(maxIter\u003d100, layers\u003dlayers, blockSize\u003d128, seed\u003d42)\\\n                    .setLabelCol(labelCol)\n    \n    print(trainer)\n\n    # train the model\n    model \u003d trainer.fit(train)\n    if save:\n        model.save(f\u0027{save}/MultilayerPerceptronClassifier/\u0027)\n    return train, test, model\n\n\ntrain, test, model \u003d nnTrainModel(df \u003d df, regime \u003d \u0027high\u0027, normalise \u003d True,\n                                  labelCol \u003d \u0027is_good\u0027, scalerType \u003d \u0027standard\u0027,\n                                  save \u003d \u0027{user_home}/ML_cuts/highSNR\u0027)\n                                  \n# Low training sources: 5,878,144 for \u003c1 kpc\n# High training sources: XX for \u003c3 kpc",
      "user": "dcr",
      "dateUpdated": "2021-08-05 00:42:02.768",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "High SNR dataset returned\nMultilayerPerceptronClassifier_16064d65bf25\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1625839840935_1063460131",
      "id": "20210709-141040_1258934891",
      "dateCreated": "2021-07-09 14:10:40.935",
      "dateStarted": "2021-08-04 15:26:34.750",
      "dateFinished": "2021-08-04 15:39:42.006",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Evaluate Model",
      "text": "%spark.pyspark\n\ndef evaluateModel(model, df, labelCol \u003d \u0027label\u0027, evaluate \u003d False,\n                  normalise \u003d True,\n                  step \u003d np.arange(0.5, 0.99, 0.025)):\n    \u0027\u0027\u0027Apply a NN to new data, with the option to evaluate if test dataset\u0027\u0027\u0027\n    \n    # compute accuracy on the test set\n    result \u003d model.transform(df)\n    predictionAndLabels \u003d result.select(\"prediction\", \u0027is_good\u0027)\n    evaluator \u003d MulticlassClassificationEvaluator(metricName\u003d\"accuracy\").setLabelCol(labelCol)\n#     print(\"Test set accuracy \u003d \" + str(evaluator.evaluate(predictionAndLabels)))\n    \n    if evaluate:\n        # Call MLlib_confusion_matrix class to plot confusion matrix\n        res \u003d MLlib_confusion_matrix(result, labelCol \u003d labelCol)\n        res.confusionMatrix(classes \u003d [\u0027Bad\u0027, \u0027Good\u0027], normalize \u003d True)\n        \n        # Call plottingThreshold to explore the effect of Thresholding\n        plottingThreshold(result, labelCol \u003d labelCol)\\\n            .threshold_subplots(step \u003d step)\n\n    return result\n\nresult \u003d evaluateModel(model \u003d model, df \u003d test, normalise \u003d True,  evaluate \u003d True, \n                      labelCol \u003d \u0027is_good\u0027)\n\n",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:57:53.965",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cFigure size 432x432 with 1 Axes\u003e\n"
          },
          {
            "type": "IMG",
            "data": "\u003d\u003d\n\n"
          },
          {
            "type": "TEXT",
            "data": "\u003cFigure size 1080x576 with 4 Axes\u003e\n"
          },
          {
            "type": "IMG",
            "data": "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\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1626107603462_339089471",
      "id": "20210712-163323_837319583",
      "dateCreated": "2021-07-12 16:33:23.462",
      "dateStarted": "2021-08-04 15:27:14.024",
      "dateFinished": "2021-08-04 15:44:24.702",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\nresult.createOrReplaceTempView(\u0027ML_res\u0027)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 09:15:10.762",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625840791896_-509318819",
      "id": "20210709-142631_1238119948",
      "dateCreated": "2021-07-09 14:26:31.896",
      "dateStarted": "2021-08-04 09:15:10.813",
      "dateFinished": "2021-08-04 09:15:10.971",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "CAMD_2",
      "text": "%spark.pyspark\ndef CAMD(passbands, catalogue, classes, colors \u003d [\u0027k\u0027, \u0027darkred\u0027, \u0027darkblue\u0027], \n         ms \u003d 1, labels \u003d None, limit \u003d 10000):\n    \u0027\u0027\u0027Plot an observational Hertzsprung-Russell diagram (aka colour / absolute magnitude diagram)\n    for the unclassified sample to show the problem,\n    include the photometric consistency filter to show the problem is astrometric in addition to photometric \u0027\u0027\u0027\n    \n    fig \u003d plt.figure(0, figsize \u003d (9.0, 9.0))\n    c \u003d -1\n    for i in classes:\n        c+\u003d1\n        if type(ms) \u003d\u003d list:\n            s \u003d ms[c]\n        else: s \u003d ms\n        if type(labels) \u003d\u003d type(None):\n            label \u003d i\n        else: label \u003d labels[c]\n        unclassified_camd_df \u003d spark.sql(f\u0027SELECT b.prediction , a.source_id,\\\n                                         a.phot_{passbands[0]}_mean_mag + 5.0*LOG10(a.parallax/100.0) \\\n                                         AS m_{passbands[0]}, {passbands[1]} FROM {catalogue} as a, \\\n                                         {\"ML_res\"} as b \\\n                                         WHERE a.source_id \u003d b.source_id AND parallax \u003e 0 \\\n                                         LIMIT {limit}\u0027)\n        \n        unclassified_camd_df \u003d unclassified_camd_df.filter(col(\u0027prediction\u0027) \u003d\u003d c)\n        x \u003d unclassified_camd_df.select(\u0027g_rp\u0027).toPandas()[\u0027g_rp\u0027][:limit]\n        y \u003d unclassified_camd_df.select(\u0027m_g\u0027).toPandas()[\u0027m_g\u0027][:limit]\n        plt.scatter(x, y, marker \u003d \u0027.\u0027, s \u003d ms, label \u003d label, color \u003d colors[c])\n    plt.ylim(21.0, -3.0)\n    plt.xlim(0, 3.5)\n    plt.ylabel(\u0027Stellar brightness (absolute G magnitude) --\u003e\u0027, fontsize \u003d 16)\n    plt.xlabel(\u0027\u003c-- Stellar temperature (G - RP magnitude)\u0027, fontsize \u003d 16)\n    lgnd \u003d plt.legend(fontsize \u003d 12)\n    for i in range(len(classes)):\n        lgnd.legendHandles[i]._sizes \u003d [55]\n\n# CAMD(passbands \u003d [\u0027g\u0027, \u0027g_rp\u0027], catalogue \u003d \u0027dcr_raw_sources\u0027, \n#      colors \u003d [\u0027grey\u0027, \u0027green\u0027], classes \u003d [\u0027Bad\u0027,\u0027Good\u0027], ms \u003d 1, limit \u003d 5000)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:58:26.544",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)\n\u001b[0;32m/tmp/ipykernel_8494/377201807.py\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m CAMD(passbands \u003d [\u0027g\u0027, \u0027g_rp\u0027], catalogue \u003d \u0027dcr_raw_sources\u0027, \n\u001b[0;32m---\u003e 37\u001b[0;31m      colors \u003d [\u0027grey\u0027, \u0027green\u0027], classes \u003d [\u0027Bad\u0027,\u0027Good\u0027], ms \u003d 1, limit \u003d 5000)\n\u001b[0m\n\u001b[0;32m/tmp/ipykernel_8494/377201807.py\u001b[0m in \u001b[0;36mCAMD\u001b[0;34m(passbands, catalogue, classes, colors, ms, labels, limit)\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m         \u001b[0munclassified_camd_df\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0munclassified_camd_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u0027prediction\u0027\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m\u003d\u003d\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 25\u001b[0;31m         \u001b[0mx\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0munclassified_camd_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u0027g_rp\u0027\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoPandas\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\u0027g_rp\u0027\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mlimit\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0munclassified_camd_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u0027m_g\u0027\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoPandas\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\u0027m_g\u0027\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mlimit\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m         \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0;34m\u0027.\u0027\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mcolors\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/spark/python/lib/pyspark.zip/pyspark/sql/dataframe.py\u001b[0m in \u001b[0;36mtoPandas\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   2153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2154\u001b[0m         \u001b[0;31m# Below is toPandas without Arrow optimization.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 2155\u001b[0;31m         \u001b[0mpdf\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_records\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcollect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m\u003d\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2156\u001b[0m         \u001b[0mcolumn_counter\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mCounter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2157\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/spark/python/lib/pyspark.zip/pyspark/sql/dataframe.py\u001b[0m in \u001b[0;36mcollect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    533\u001b[0m         \"\"\"\n\u001b[1;32m    534\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mSCCallSiteSync\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sc\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcss\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 535\u001b[0;31m             \u001b[0msock_info\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcollectToPython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    536\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_load_from_socket\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msock_info\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mBatchedSerializer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mPickleSerializer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    537\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1253\u001b[0m             \u001b[0mproto\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEND_COMMAND_PART\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1254\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1255\u001b[0;31m         \u001b[0manswer\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1256\u001b[0m         return_value \u003d get_return_value(\n\u001b[1;32m   1257\u001b[0m             answer, self.gateway_client, self.target_id, self.name)\n\n\u001b[0;32m/opt/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36msend_command\u001b[0;34m(self, command, retry, binary)\u001b[0m\n\u001b[1;32m    983\u001b[0m         \u001b[0mconnection\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_connection\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    984\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 985\u001b[0;31m             \u001b[0mresponse\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mconnection\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    986\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbinary\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    987\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_connection_guard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconnection\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36msend_command\u001b[0;34m(self, command)\u001b[0m\n\u001b[1;32m   1150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1151\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1152\u001b[0;31m             \u001b[0manswer\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0msmart_decode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstream\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1153\u001b[0m             \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdebug\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Answer received: {0}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0manswer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1154\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0manswer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproto\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRETURN_MESSAGE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/usr/lib64/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    587\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    591\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_timeout_occurred\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;31mKeyboardInterrupt\u001b[0m: \u003cFigure size 648x648 with 1 Axes\u003e\n"
          },
          {
            "type": "IMG",
            "data": "\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1625860018274_-1211352710",
      "id": "20210709-194658_1026318834",
      "dateCreated": "2021-07-09 19:46:58.274",
      "dateStarted": "2021-08-04 09:16:08.474",
      "dateFinished": "2021-08-04 09:20:26.073",
      "status": "ABORT",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n# test.filter(col(\u0027is_good\u0027) \u003d\u003d 0).count(), test.count()",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:58:20.391",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "(835871, 1130126)"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1628073268247_-905529329",
      "id": "20210804-103428_592871051",
      "dateCreated": "2021-08-04 10:34:28.247",
      "dateStarted": "2021-08-04 10:34:59.309",
      "dateFinished": "2021-08-04 10:35:03.906",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\ndef CAMD(passbands, catalogue, classes, colors \u003d [\u0027k\u0027, \u0027darkred\u0027, \u0027darkblue\u0027], \n         ms \u003d 1, labels \u003d None, limit \u003d 10000):\n    \u0027\u0027\u0027Plot an observational Hertzsprung-Russell diagram (aka colour / absolute magnitude diagram)\n    for the unclassified sample to show the problem,\n    include the photometric consistency filter to show the problem is astrometric in addition to photometric \u0027\u0027\u0027\n    \n    fig \u003d plt.figure(0, figsize \u003d (9.0, 9.0))\n    c \u003d -1\n    \n    unclassified_camd_df \u003d spark.sql(f\u0027SELECT b.prediction , a.source_id,\\\n                                         a.phot_{passbands[0]}_mean_mag + 5.0*LOG10(a.parallax/100.0) \\\n                                         AS m_{passbands[0]}, {passbands[1]} FROM {catalogue} as a, \\\n                                         {\"ML_res\"} as b \\\n                                         WHERE a.source_id \u003d b.source_id \\\n                                         LIMIT {limit}\u0027)\n    for i in classes:\n        c+\u003d1\n        if type(ms) \u003d\u003d list:\n            s \u003d ms[c]\n        else: s \u003d ms\n        if type(labels) \u003d\u003d type(None):\n            label \u003d i\n        else: label \u003d labels[c]\n        \n        tmp \u003d unclassified_camd_df.filter(col(\u0027prediction\u0027) \u003d\u003d c)\n        tmp \u003d tmp.select([\u0027g_rp\u0027, \u0027m_g\u0027]).toPandas()\n        plt.scatter(tmp[\u0027g_rp\u0027], tmp[\u0027m_g\u0027], marker \u003d \u0027.\u0027, s \u003d ms, label \u003d label, color \u003d colors[c])\n    plt.ylim(21.0, -3.0)\n    plt.xlim(0, 3.5)\n    plt.ylabel(\u0027Stellar brightness (absolute G magnitude) --\u003e\u0027, fontsize \u003d 16)\n    plt.xlabel(\u0027\u003c-- Stellar temperature (G - RP magnitude)\u0027, fontsize \u003d 16)\n    lgnd \u003d plt.legend(fontsize \u003d 12)\n    for i in range(len(classes)):\n        lgnd.legendHandles[i]._sizes \u003d [55]\n        \n# CAMD(passbands \u003d [\u0027g\u0027, \u0027g_rp\u0027], catalogue \u003d \u0027dcr_raw_sources\u0027, \n#      colors \u003d [\u0027grey\u0027, \u0027green\u0027], classes \u003d [\u0027Bad\u0027,\u0027Good\u0027], ms \u003d 1, limit \u003d 5000)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:58:19.210",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1628068734096_1236120530",
      "id": "20210804-091854_542122573",
      "dateCreated": "2021-08-04 09:18:54.096",
      "dateStarted": "2021-08-04 14:55:16.619",
      "dateFinished": "2021-08-04 14:55:16.819",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n# Evalute all sources from raw_sources_cached using the given model\n",
      "user": "dcr",
      "dateUpdated": "2021-08-03 15:55:23.695",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eEvalute all sources from raw_sources_cached using the given model\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1626167903323_406401056",
      "id": "20210713-091823_1640482153",
      "dateCreated": "2021-07-13 09:18:23.323",
      "dateStarted": "2021-07-19 13:30:00.822",
      "dateFinished": "2021-07-19 13:30:00.831",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Load models",
      "text": "%spark.pyspark\ndef loadScaler(filename, scalerType \u003d \u0027standard\u0027):\n    \u0027\u0027\u0027loads scaler based of scaler type\u0027\u0027\u0027\n    if scalerType \u003d\u003d \u0027standard\u0027:\n        from pyspark.ml.feature import StandardScalerModel\n        model \u003d StandardScalerModel.load(filename)\n    \n    elif scaterType \u003d\u003d \u0027MinMax\u0027:\n        from pyspark.ml.feature import MinMaxScalerModel\n        model \u003d MinMaxScalerModel.load(filename)\n    else: raise NameError(f\u0027scalerType can be either \"MinMax\" or \"standard\" not {scalerType}\u0027)\n    return model\n        \ndef nnLoadModel(filepath):\n    \u0027\u0027\u0027loads NN from savefile\u0027\u0027\u0027\n    from pyspark.ml.classification import MultilayerPerceptronClassificationModel\n    return MultilayerPerceptronClassificationModel.load(filepath) ",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:58:08.851",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1626167902558_-301626373",
      "id": "20210713-091822_341278603",
      "dateCreated": "2021-07-13 09:18:22.558",
      "dateStarted": "2021-08-02 15:13:49.549",
      "dateFinished": "2021-08-02 15:13:49.786",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Evaluate Unlabelled Data",
      "text": "%spark.pyspark\n\ndef selectRegime(df, regime \u003d \u0027high\u0027):\n    if \u0027high\u0027 in regime:\n        return df.filter(col(\u0027abs_SNR\u0027) \u003e 4.5)\n    if \u0027low\u0027 in regime:\n        return df.filter(col(\u0027abs_SNR\u0027) \u003c 4.5)\n\n\ndef select_unlabelled_data(table, regime, filename, featuresCol \u003d \u0027features\u0027, \n                           normalise \u003d False, scalerType \u003d \u0027standard\u0027):\n    \u0027\u0027\u0027selects full table to apply the trained model\u0027\u0027\u0027\n    \n    features \u003d getFeatures(withPhotometric \u003d True)\n    # Get unlabelled data\n    df \u003d spark.sql(f\u0027SELECT a.*, a.phot_g_mean_mag + 5.0*LOG10(a.parallax/100.0) \\\n                                         AS m_g, a.g_rp FROM {table} as a\u0027)\n    df \u003d df.select(features).withColumn(\u0027abs_SNR\u0027, \n                        f.abs(col(\u0027parallax_over_error\u0027)))\n    \n    # Get data that fits the regime abs_SNR parameters\n    df \u003d selectRegime(df \u003d df, regime \u003d regime)\n    features \u003d select_training_features(df, regime \u003d regime)\n    \n    # Assemble training features into DenseVector\n    assembler \u003d VectorAssembler(inputCols\u003dfeatures,\n                                outputCol\u003dfeaturesCol)\n    df \u003d assembler.transform(df)\\\n                .select([\u0027source_id\u0027, \u0027m_g\u0027, \u0027g_rp\u0027, featuresCol])\n    \n    if normalise:\n        # Scale the independent test data with a loaded scaler\n        scaler \u003d loadScaler(f\u0027{filename}/{scalerType}_normalisation_model\u0027, scalerType \u003d scalerType)\n        df \u003d normaliseData(df.withColumnRenamed(featuresCol, \u0027inputFeatures\u0027), model \u003d scaler)\n        \n    # Evaluate data with trained model\n    nnModelRead \u003d nnLoadModel(filepath \u003d f\u0027{filename}/MultilayerPerceptronClassifier\u0027)\n    df \u003d evaluateModel(nnModel \u003d nnModelRead, df \u003d df, normalise \u003d True,  evaluate \u003d False, \n                       labelCol \u003d \u0027is_good\u0027)\n    return df\n\n# new \u003d select_unlabelled_data(table \u003d \u0027edr3_sources\u0027, regime \u003d \u0027high\u0027, filename \u003d \u0027temp/\u0027,\n#                       normalise \u003d True, scalerType \u003d \u0027standard\u0027)\n\n# new.createOrReplaceTempView(\u0027dcr_ML_res\u0027)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:58:15.208",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1626167901869_-1328645231",
      "id": "20210713-091821_219105253",
      "dateCreated": "2021-07-13 09:18:21.869",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Spatial Plots",
      "text": "%spark.pyspark\ndef spatialDistributionSubplot(catalogue, resCat, class_val \u003d 0, label \u003d None, color \u003d \u0027k\u0027, save \u003d False):\n\n    plt.figure(3, figsize \u003d (16.18, 10.0))\n    \n    for i, value in enumerate(class_val):\n        plt.subplot(1,2,i+1, projection\u003d\u0027aitoff\u0027)\n        plt.grid(True)\n\n        df \u003d spark.sql(f\u0027SELECT b.prediction , b.source_id,\\\n                                                 a.ra, a.dec FROM {catalogue} as a, \\\n                                                 {resCat} as b \\\n                                                 WHERE a.source_id \u003d b.source_id \\\n                                                 AND b.prediction \u003d {class_val[i]}\u0027)\n        print(df.count())\n        x \u003d list((df.select(\u0027ra\u0027).toPandas()[\u0027ra\u0027] - 180.0) * np.pi / 180.0)\n        y \u003d list( df.select(\u0027dec\u0027).toPandas()[\u0027dec\u0027] * np.pi / 180.0)\n        plt.title(f\u0027{label[i]}\u0027)\n        plt.scatter(x, y, marker \u003d \u0027.\u0027, s \u003d 1, c \u003d color[i])\n    if save:\n        savefigs(save)\n    plt.show()\n    \n# spatialDistributionSubplot(catalogue \u003d \u0027edr3_sources\u0027, resCat \u003d \u0027dcr_ML_res\u0027, \n#                     class_val \u003d [1,0], label \u003d [\u0027Good Sources\u0027, \u0027Bad Sources\u0027], \n#                     color \u003d [\u0027k\u0027, \u0027darkred\u0027])",
      "user": "dcr",
      "dateUpdated": "2021-08-04 15:58:13.607",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1626167900973_-342336082",
      "id": "20210713-091820_414334511",
      "dateCreated": "2021-07-13 09:18:20.973",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n",
      "user": "dcr",
      "dateUpdated": "2021-07-13 09:18:18.457",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1626167898455_1167035981",
      "id": "20210713-091818_1065685626",
      "dateCreated": "2021-07-13 09:18:18.455",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "user": "dcr",
      "dateUpdated": "2021-07-13 09:18:30.403",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1625860067491_920688105",
      "id": "20210709-194747_1351702772",
      "dateCreated": "2021-07-09 19:47:47.492",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "experiments/dcr/ML_cuts",
  "id": "2G9BXYCKP",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "spark:gaiauser:": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}