{
  "paragraphs": [
    {
      "text": "%spark.pyspark\n\nimport numpy as np\nimport pandas as pd\nimport pyspark.ml as ml\nimport matplotlib.pylab as plt\nfrom collections import Counter\nimport pyspark.sql.functions as f\nfrom pyspark.ml.feature import VectorAssembler\nfrom pyspark.sql.functions import lit, col, when, floor\nfrom pyspark.ml.classification import MultilayerPerceptronClassifier\nfrom pyspark.ml.evaluation import MulticlassClassificationEvaluator\n\nuser_home \u003d \u0027file:///user/dcr/\u0027",
      "user": "dcr",
      "dateUpdated": "2021-08-04 12:38:12.487",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625581653395_1507700533",
      "id": "20210706-142733_1394646815",
      "dateCreated": "2021-07-06 14:27:33.395",
      "dateStarted": "2021-08-04 12:38:12.544",
      "dateFinished": "2021-08-04 12:38:13.352",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n# from mllib_results import MLlib_confusion_matrix, MLlibMultiClassEvaluator, plottingThreshold",
      "user": "dcr",
      "dateUpdated": "2021-08-04 12:38:14.674",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625839938596_994557036",
      "id": "20210709-141218_1170342984",
      "dateCreated": "2021-07-09 14:12:18.596",
      "dateStarted": "2021-08-04 12:38:14.725",
      "dateFinished": "2021-08-04 12:38:14.842",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n# define the data source\n# gs_df \u003d sqlContext.read.parquet(\u0027file:////user/nch/PARQUET/TESTS/GEDR3/*.parquet\u0027)\n# # register as SQL-queryable \n# gs_df.createOrReplaceTempView(\u0027dcr_gaia_source\u0027)",
      "user": "dcr",
      "dateUpdated": "2021-08-03 15:58:19.171",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625648950407_1021994287",
      "id": "20210707-090910_1022361690",
      "dateCreated": "2021-07-07 09:09:10.407",
      "dateStarted": "2021-08-03 15:58:19.231",
      "dateFinished": "2021-08-03 15:58:19.360",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\ncolumns \u003d \u0027source_id, parallax, parallax_error, parallax_over_error, pmra, astrometric_sigma5d_max,\\\npmdec, pmdec_error, pmra_error, astrometric_excess\\\n_noise ,visibility_periods_used, ruwe, astrometric_gof_al,\\\nipd_gof_harmonic_amplitude, ipd_frac_odd_win, ipd_frac_multi_peak, phot_g_mean_mag, phot_rp_mean_mag, g_rp\u0027",
      "user": "dcr",
      "dateUpdated": "2021-08-04 12:38:18.218",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1627896017164_-174450795",
      "id": "20210802-092017_1155122414",
      "dateCreated": "2021-08-02 09:20:17.165",
      "dateStarted": "2021-08-04 12:38:18.266",
      "dateFinished": "2021-08-04 12:38:18.391",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Collect Required Data",
      "text": "%spark.pyspark\n# clear any previously cached data in the context (cells may be executed in any order, and out-dated by changes from here onwards)\nsqlContext.clearCache()\n\n# Select all data\nraw_sources_df \u003d spark.sql(f\u0027SELECT {columns} \\\n FROM gaia_source \\\n WHERE (1/parallax \u003c 0.1)\u0027)\n# cache it for speedy access below (all subsequent samples are derived from this):\n# raw_sources_cached \u003d raw_sources_df.cache()\n# ... some good advice concerning caching in Spark here: https://towardsdatascience.com/best-practices-for-caching-in-spark-sql-b22fb0f02d34\n\n# register as SQL-queryable\nraw_sources_df.createOrReplaceTempView(\u0027dcr_raw_sources\u0027)\ndel raw_sources_df\n# raw_sources_df.count()\n# EDR3: 1,055,241,799 sources in XXmin XXsec (\u003c3 kpcs)\n# EDR3: 574,486,895 sources in 00min 02sec (\u003c1 kpcs)\n# EDR3: 357,995,072 sources in 00min 02sec (\u003c0.1 kpcs)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 12:38:19.207",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625581617886_-1521281747",
      "id": "20210706-142657_7677965",
      "dateCreated": "2021-07-06 14:26:57.886",
      "dateStarted": "2021-08-04 12:38:19.242",
      "dateFinished": "2021-08-04 12:38:21.060",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n# raw_sources_df.count()",
      "user": "dcr",
      "dateUpdated": "2021-08-03 15:58:21.615",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1627392913321_1655927669",
      "id": "20210727-133513_1982076653",
      "dateCreated": "2021-07-27 13:35:13.321",
      "dateStarted": "2021-08-03 15:58:21.646",
      "dateFinished": "2021-08-03 15:58:21.835",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show Tables",
      "text": "%spark.pyspark\n\nspark.catalog.listTables()",
      "user": "dcr",
      "dateUpdated": "2021-08-04 12:38:22.988",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "[Table(name\u003d\u0027gaia_source\u0027, database\u003d\u0027gaiaedr3\u0027, description\u003dNone, tableType\u003d\u0027EXTERNAL\u0027, isTemporary\u003dFalse),\n Table(name\u003d\u0027gaia_source_allwise_best_neighbours\u0027, database\u003d\u0027gaiaedr3\u0027, description\u003dNone, tableType\u003d\u0027EXTERNAL\u0027, isTemporary\u003dFalse),\n Table(name\u003d\u0027gaia_source_ps1_best_neighbours\u0027, database\u003d\u0027gaiaedr3\u0027, description\u003dNone, tableType\u003d\u0027EXTERNAL\u0027, isTemporary\u003dFalse),\n Table(name\u003d\u0027gaia_source_tmasspsc_best_neighbours\u0027, database\u003d\u0027gaiaedr3\u0027, description\u003dNone, tableType\u003d\u0027EXTERNAL\u0027, isTemporary\u003dFalse),\n Table(name\u003d\u0027dcr_raw_sources\u0027, database\u003dNone, description\u003dNone, tableType\u003d\u0027TEMPORARY\u0027, isTemporary\u003dTrue)]"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1625581158073_12553115",
      "id": "20210706-141918_2051034386",
      "dateCreated": "2021-07-06 14:19:18.073",
      "dateStarted": "2021-08-04 12:38:23.028",
      "dateFinished": "2021-08-04 12:38:24.208",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Show CAMD Unsorted",
      "text": "%spark.pyspark\n\ndef CAMD(passbands, catalogues, colors \u003d [\"k\", \u0027darkred\u0027, \u0027darkblue\u0027], ms \u003d 1, labels \u003d None, limit \u003d 10000):\n    \"\"\"plot an observational Hertzsprung-Russell diagram (aka colour / absolute magnitude diagram)\n    for the unclassified sample to show the problem,\n    include the photometric consistency filter to show the problem is astrometric in addition to photometric\"\"\"\n    \n    import matplotlib.pylab as plt\n    fig \u003d plt.figure(0, figsize \u003d (9.0, 9.0))\n    c \u003d -1\n\n    for i in catalogues:\n        c+\u003d1\n        if type(ms) \u003d\u003d list:\n            s \u003d ms[c]\n        else: s \u003d ms\n        if type(labels) \u003d\u003d type(None):\n            label \u003d i\n        else: label \u003d labels[c]\n        unclassified_camd_df \u003d spark.sql(f\"SELECT phot_{passbands[0]}_mean_mag + 5.0*LOG10(parallax/100.0) AS m_{passbands[0]}, {passbands[1]} FROM {i} WHERE parallax \u003e 0  LIMIT {limit}\")\n\n        x \u003d unclassified_camd_df.select(\"g_rp\").toPandas()[\"g_rp\"][:limit]\n        y \u003d unclassified_camd_df.select(\"m_g\").toPandas()[\"m_g\"][:limit]\n        plt.scatter(x, -y, marker \u003d \u0027.\u0027, s \u003d s, c \u003d colors[c], label \u003d label)\n    # plt.ylim(21.0, -3.0)\n    plt.ylabel(\"Stellar brightness (absolute G magnitude) --\u003e\", fontsize \u003d 16)\n    plt.xlabel(\"\u003c-- Stellar temperature (G - RP magnitude)\", fontsize \u003d 16)\n    lgnd \u003d plt.legend(fontsize \u003d 12, markerscale \u003d 1)\n    for i in range(len(catalogues)):\n        lgnd.legendHandles[i]._sizes \u003d [25]\n\nCAMD(passbands \u003d [\"g\", \"g_rp\"], catalogues \u003d [\"dcr_raw_sources\"], colors \u003d [\"k\"], limit \u003d 10000, labels \u003d [\u0027All Sources\u0027])",
      "user": "dcr",
      "dateUpdated": "2021-08-03 15:58:22.910",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cFigure size 648x648 with 1 Axes\u003e\n"
          },
          {
            "type": "IMG",
            "data": "\u003d\u003d\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1625584343844_983222154",
      "id": "20210706-151223_1219291343",
      "dateCreated": "2021-07-06 15:12:23.844",
      "dateStarted": "2021-08-03 15:58:22.973",
      "dateFinished": "2021-08-03 15:58:31.057",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Get HEALPix-6 Factor",
      "text": "%spark.pyspark\n\ndef healpix_level_N(source_id, level, constant \u003d False):\n    \u0027\u0027\u0027returns the HEALpix pixel from Gaia Source ID\u0027\u0027\u0027\n    if constant \u003d\u003d True:\n        return 2**35 * 4**(12-level)\n    else:    \n        return np.floor(source_id/(2**35 * 4**(12-level)))\n",
      "user": "dcr",
      "dateUpdated": "2021-08-04 12:38:29.828",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625583464651_751053772",
      "id": "20210706-145744_1307665902",
      "dateCreated": "2021-07-06 14:57:44.652",
      "dateStarted": "2021-08-04 12:38:29.862",
      "dateFinished": "2021-08-04 12:38:30.037",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n### Sort *\u0027Labelled\u0027* Training Data\n\n- Good data \u003d each HEALPix level-6 pixel that contains no sources with parallax_over_error \u003c −3.5.\n- Bad data \u003d parallax_over_error \u003c −4.5\n\n### With further split into SNR bins\n\n* High SNR \u003d parallax_over_error (SNR) \u003e 4.5\n* Low SNR \u003d -3.5 \u003c SNR \u003c 4.5",
      "user": "dcr",
      "dateUpdated": "2021-08-03 15:58:31.336",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eSort \u003cem\u003e\u0026lsquo;Labelled\u0026rsquo;\u003c/em\u003e Training Data\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003eGood data \u003d each HEALPix level-6 pixel that contains no sources with parallax_over_error \u0026lt; −3.5.\u003c/li\u003e\n  \u003cli\u003eBad data \u003d parallax_over_error \u0026lt; −4.5\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eWith further split into SNR bins\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003eHigh SNR \u003d parallax_over_error (SNR) \u0026gt; 4.5\u003c/li\u003e\n  \u003cli\u003eLow SNR \u003d -3.5 \u0026lt; SNR \u0026lt; 4.5\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1625583467804_1982882647",
      "id": "20210706-145747_58341513",
      "dateCreated": "2021-07-06 14:57:47.804",
      "dateStarted": "2021-08-03 15:58:31.371",
      "dateFinished": "2021-08-03 15:58:31.380",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Define features",
      "text": "%spark.pyspark\n\nfactor \u003d healpix_level_N(source_id \u003d None, level \u003d 6, constant \u003d True)\n\ndef getFeatures(withPhotometric \u003d False):\n    # select features to use\n    features \u003d [\n        \u0027source_id\u0027, \u0027parallax_error\u0027, \u0027parallax_over_error\u0027,\n        \u0027pmra\u0027, \u0027astrometric_sigma5d_max\u0027, \u0027pmdec\u0027,\n        \u0027pmdec_error\u0027, \u0027pmra_error\u0027, \u0027astrometric_excess_noise\u0027,\n        \u0027visibility_periods_used\u0027, \u0027ruwe\u0027, \u0027astrometric_gof_al\u0027,\n        \u0027ipd_gof_harmonic_amplitude\u0027, \u0027ipd_frac_odd_win\u0027, \u0027ipd_frac_multi_peak\u0027,]\n        \n    if withPhotometric:\n        features.extend([\u0027m_g\u0027, \u0027g_rp\u0027])\n    \n    return features\n\nfeatures \u003d getFeatures()",
      "user": "dcr",
      "dateUpdated": "2021-08-04 12:38:32.919",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625839043312_909039022",
      "id": "20210709-135723_1861639683",
      "dateCreated": "2021-07-09 13:57:23.312",
      "dateStarted": "2021-08-04 12:38:32.951",
      "dateFinished": "2021-08-04 12:38:33.067",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Select Good or Bad Sources",
      "text": "%spark.pyspark\n\ndef select_bad_sources(table):\n    \u0027\u0027\u0027Selects bad sources from eDR3\u0027\u0027\u0027\n    \n    bad \u003d spark.sql(f\u0027SELECT a.* \\\n                    FROM {table} as a\\\n                    WHERE parallax_over_error \u003c -4.5\u0027)\n    # print(f\u0027{bad.count()} bad sources\u0027)\n    print(f\u0027Collected bad sources\u0027)\n    \n    return bad\n\ndef select_good_sources(table):\n    \u0027\u0027\u0027Selects good sources from eDR3\u0027\u0027\u0027\n    \n    good \u003d spark.sql(f\u0027SELECT a.* \\\n    FROM {table} as a \\\n    WHERE (a.parallax_over_error \u003e 4.5 AND (a.phot_g_mean_mag - a.phot_rp_mean_mag) \u003c1.8) \\\n    OR (a.parallax_over_error \u003c 4.5 AND a.parallax_over_error \u003e -3.0 AND \\\n    (a.phot_g_mean_mag - a.phot_rp_mean_mag) \u003c1.5)\u0027)\n    # print(f\u0027{good.count()} good sources\u0027)\n    print(f\u0027Collected Good sources\u0027)\n    return good\n\ndef with_flags(table, features \u003d \"*\"):\n    \u0027\u0027\u0027Collects data with an \"is_good\" flag for trianing NN\u0027\u0027\u0027\n    \n    # Select training data with flag for good or bad data.\n    good \u003d select_good_sources(table).select(features).withColumn(\u0027is_good\u0027, lit(1))\n    bad \u003d select_bad_sources(table).select(features).withColumn(\u0027is_good\u0027, lit(0))\n    \n    factor \u003d healpix_level_N(source_id \u003d None, level \u003d 6, constant \u003d True)\n    \n    # Join data with a column for |SNR|\n    df \u003d good.union(bad)\\\n                    .withColumn(\u0027abs_SNR\u0027, \n                                f.abs(col(\u0027parallax_over_error\u0027)))\\\n                    .withColumn(\u0027hpx6\u0027, floor(col(\u0027source_id\u0027)/factor))\n    print(\u0027DataBase with flags\u0027)\n    \n    return df",
      "user": "dcr",
      "dateUpdated": "2021-08-04 12:38:34.481",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625839042580_173330254",
      "id": "20210709-135722_1405384887",
      "dateCreated": "2021-07-09 13:57:22.580",
      "dateStarted": "2021-08-04 12:38:34.516",
      "dateFinished": "2021-08-04 12:38:34.789",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Drop Bad Pixels",
      "text": "%spark.pyspark\n\n# Total pixels \u003d 49,152 (Currently 10410 good??)\n\ndef drop_bad_pixels(data, all_sources):\n    \u0027\u0027\u0027drop good sources from HEALpix6 pixels that contain bad sources\u0027\u0027\u0027\n    \n    # Identify bad pixels\n    # bad_pixels \u003d set([int(i[0]) for i in df.filter(col(\u0027parallax_over_error\u0027) \u003c -3.0)\\\n    #                   .select(\u0027hpx6\u0027).toPandas().values])\n    \n    bad_pixels \u003d spark.sql(f\u0027SELECT FLOOR(a.source_id/{factor}) as hpx6 \\\n    FROM {all_sources} as a \\\n    WHERE (a.parallax_over_error \u003c - 3.5)\u0027).distinct()\n                      \n    # bad_pixels \u003d data.filter(col(\u0027parallax_over_error\u0027) \u003c -3.5).select(\u0027hpx6\u0027).distinct() # spark version of above\n\n    # Drop data from pixels that contain bad datapoints\n    # data \u003d data.filter((col(\u0027is_good\u0027) \u003d\u003d 0) | \n    #               ((col(\u0027is_good\u0027) \u003d\u003d 1) \u0026 \n    #                 (~data.hpx6.isin(bad_pixels))))\n    \n    bad \u003d data.filter((col(\u0027is_good\u0027) \u003d\u003d 0))\n    # Add bad.columns to ensure correct column order for join\n    good \u003d data.join(bad_pixels, \u0027hpx6\u0027, how \u003d \"left_anti\")[bad.columns]\n    \n    df \u003d good.union(bad)\n\n    # N_good_pixels \u003d data.select(\u0027hpx6\u0027).distinct()\n    return df\n\ndf \u003d with_flags(table \u003d \u0027dcr_raw_sources\u0027, features \u003d features)\ndf \u003d drop_bad_pixels(df, all_sources \u003d \u0027dcr_raw_sources\u0027)\ndf \u003d df.cache()\ndf.createOrReplaceTempView(\u0027dcr_data\u0027)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 12:38:52.945",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Collected Good sources\nCollected bad sources\nDataBase with flags\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1625839041704_-1227947627",
      "id": "20210709-135721_329827109",
      "dateCreated": "2021-07-09 13:57:21.704",
      "dateStarted": "2021-08-04 12:38:52.984",
      "dateFinished": "2021-08-04 12:38:54.154",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\ndf.filter(col(\u0027is_good\u0027) \u003d\u003d 0).count()\n\n# Total size of training data\n# EDR3: [11,207,747 / 4,180,244] Source [Good/Bad] (NO limit)\n# EDR3: 9,371,204 sources (\u003c3 kpcs)??\n# EDR3: 5,548,695 sources (\u003c1 kpcs)??\n# EDR3: [1,472,930 / 4,180,244] sources [Good/Bad] (\u003c0.1 kpcs) [45 minutes to train]",
      "user": "dcr",
      "dateUpdated": "2021-08-04 10:47:00.304",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "4180244"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1627901313622_23704750",
      "id": "20210802-104833_2004095152",
      "dateCreated": "2021-08-02 10:48:33.623",
      "dateStarted": "2021-08-03 15:58:33.238",
      "dateFinished": "2021-08-03 16:18:09.940",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\ndf.count()",
      "user": "dcr",
      "dateUpdated": "2021-08-03 16:18:10.006",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "5653174"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1628005460926_503859733",
      "id": "20210803-154420_1246365516",
      "dateCreated": "2021-08-03 15:44:20.926",
      "dateStarted": "2021-08-03 16:18:10.077",
      "dateFinished": "2021-08-03 16:18:11.659",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\ndf.createOrReplaceTempView(\u0027dcr_training_sources\u0027)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 13:43:47.531",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1628084610447_-577743844",
      "id": "20210804-134330_1534317830",
      "dateCreated": "2021-08-04 13:43:30.447",
      "dateStarted": "2021-08-04 13:43:47.582",
      "dateFinished": "2021-08-04 13:43:47.742",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Spacial Distribution",
      "text": "%spark.pyspark\ndef spacialDistributionSubplot(dat, class_val \u003d 0, label \u003d None, limit \u003d None, labelCol \u003d \u0027label\u0027, color \u003d \u0027k\u0027, save \u003d False):\n\n    plt.figure(3, figsize \u003d (16.18, 10.0))\n    \n    dat \u003d spark.sql(f\u0027SELECT b.is_good, a.ra, a.dec FROM gaia_source as a, \\\n                                                 dcr_training_sources as b \\\n                                                 WHERE a.source_id \u003d b.source_id LIMIT {limit}\u0027)\n    dat \u003d dat.withColumn(\u0027raProj\u0027, (col(\u0027ra\u0027) - 180.0) * np.pi / 180.0)\\\n                .withColumn(\u0027decProj\u0027, (col(\u0027dec\u0027) * np.pi / 180.0))\\\n                    .select([\u0027raProj\u0027, \u0027decProj\u0027, \u0027is_good\u0027])\\\n                        .toPandas()\n    \n    print(\u0027data in Pandas\u0027)\n    for i, value in enumerate(class_val):\n        tmp \u003d dat[dat[\u0027is_good\u0027] \u003d\u003d value]\n        plt.subplot(1,2,i+1, projection\u003d\u0027aitoff\u0027)\n        plt.grid(True)\n        plt.title(f\u0027{label[i]}\u0027)\n        plt.scatter(tmp[\u0027raProj\u0027], tmp[\u0027decProj\u0027], marker \u003d \u0027.\u0027, s \u003d 1, c \u003d color[i])\n    if save:\n        savefigs(save)\n    plt.show()\n    \nspacialDistributionSubplot(dat \u003d dat, class_val \u003d [1,0], label \u003d [\u0027Good Sources\u0027, \u0027Bad Sources\u0027], \n                    color \u003d [\u0027k\u0027, \u0027darkred\u0027], limit \u003d 1000, labelCol \u003d \u0027is_good\u0027)\n\n",
      "user": "dcr",
      "dateUpdated": "2021-08-04 14:54:34.000",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "data in Pandas\n\u003cFigure size 1164.96x720 with 2 Axes\u003e\n"
          },
          {
            "type": "IMG",
            "data": "\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1628076430026_1185499204",
      "id": "20210804-112710_1814993011",
      "dateCreated": "2021-08-04 11:27:10.026",
      "dateStarted": "2021-08-04 14:07:02.956",
      "dateFinished": "2021-08-04 14:08:58.490",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n# Regimes:\n\n### Low |SNR|\n* |SNR| \u003c 4.5 but training data omits data with |SNR| \u003c 4.5 to prevent the imbalance in coverage of SNR-space in the good and bad training sets from impacting our classifications in the low-SNR regime.\n* Does not include |SNR| as a feature.\n\n### High |SNR|\n* Uses the entire training set",
      "user": "dcr",
      "dateUpdated": "2021-08-03 16:18:11.677",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "title": false,
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eRegimes:\u003c/h1\u003e\n\u003ch3\u003eLow |SNR|\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e|SNR| \u0026lt; 4.5 but training data omits data with |SNR| \u0026lt; 4.5 to prevent the imbalance in coverage of SNR-space in the good and bad training sets from impacting our classifications in the low-SNR regime.\u003c/li\u003e\n  \u003cli\u003eDoes not include |SNR| as a feature.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eHigh |SNR|\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003eUses the entire training set\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1625839040493_-1840563787",
      "id": "20210709-135720_1210777367",
      "dateCreated": "2021-07-09 13:57:20.493",
      "dateStarted": "2021-08-03 16:18:11.756",
      "dateFinished": "2021-08-03 16:18:11.768",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Return correct data for regime",
      "text": "%spark.pyspark\n\ndef return_low_snr(df, features \u003d \u0027*\u0027):\n    \u0027\u0027\u0027Creates low SNR training dataset. (-3.5 \u003c SNR \u003c 4.5)\n    This dataset does not include parallax over error as a training feature\n    Counter intuitively, this dataset only includes data with |SNR| \u003e 4.5.\u0027\u0027\u0027\n    df \u003d df.select(features)\\\n                .filter((col(\u0027abs_SNR\u0027) \u003e 4.5) | (col(\u0027is_good\u0027) \u003d\u003d 0))\n    \n#     print(f\u0027 Low SNR dataset contains {df.filter(df.is_good \u003d\u003d 1).count()} \\\n# \"good\" data points and {df.filter(df.is_good \u003d\u003d 0).count()} \"bad\" datapoints.\u0027)\n    print(\u0027Low SNR dataset returned\u0027)\n    return df\n\ndef return_high_snr(df, features \u003d \u0027*\u0027):\n    \u0027\u0027\u0027Creates high SNR training dataset. (|SNR| \u003e 4.5)\n    This dataset does include parallax over error as a training feature.\u0027\u0027\u0027\n    \n#     print(f\u0027High SNR dataset contains {df.filter(df.is_good \u003d\u003d 1).count()} \\\n# \"good\" data points and {df.filter(df.is_good \u003d\u003d 0).count()} \"bad\" datapoints.\u0027)\n    print(\u0027High SNR dataset returned\u0027)\n    \n    return df.select(features)\n",
      "user": "dcr",
      "dateUpdated": "2021-08-03 16:18:11.855",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625839712240_-357687631",
      "id": "20210709-140832_772076010",
      "dateCreated": "2021-07-09 14:08:32.240",
      "dateStarted": "2021-08-03 16:18:11.897",
      "dateFinished": "2021-08-03 16:18:12.034",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Split into Train and Test Data",
      "text": "%spark.pyspark\n\ndef split_data(data, split \u003d 0.2, seed \u003d 42):\n    \u0027\u0027\u0027Splits a SQL.DataFrame into independent training and test datasets\u0027\u0027\u0027\n    \n    return data.randomSplit([1-split, split], seed)\n\ndef get_training_data(df, regime, split \u003d 0.2, seed \u003d 42,):\n    \u0027\u0027\u0027returns tuple of DataFrames of training and test data \n       for either High SNR or Low SNR regimes.\u0027\u0027\u0027\n    if \u0027high\u0027 in regime:\n        df \u003d return_high_snr(df)\n        \n    elif \u0027low\u0027 in regime:\n        df \u003d return_low_snr(df)\n        \n    else: raise NameError(\u0027regime is either \"high\" or \"low\"\u0027)\n    return split_data(df, split, seed)",
      "user": "dcr",
      "dateUpdated": "2021-08-03 16:18:12.096",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625839720004_956296500",
      "id": "20210709-140840_427510120",
      "dateCreated": "2021-07-09 14:08:40.004",
      "dateStarted": "2021-08-03 16:18:12.127",
      "dateFinished": "2021-08-03 16:18:12.234",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Select Training Features",
      "text": "%spark.pyspark\n\ndef select_training_features(df, regime):\n    \u0027\u0027\u0027selects correct features for the given regime\u0027\u0027\u0027\n    \n    features \u003d [i for i in df.columns if i not in [\u0027source_id\u0027, \u0027parallax_over_error\u0027, \n                                                   \u0027is_good\u0027, \u0027hpx6\u0027, \u0027m_g\u0027, \u0027g_rp\u0027]]\n    \n    if \u0027low\u0027 in regime:\n        features.remove(\u0027abs_SNR\u0027)\n    elif not \u0027high\u0027 in regime: raise NameError(\u0027regime is either \"high\" or \"low\"\u0027)\n    return features",
      "user": "dcr",
      "dateUpdated": "2021-08-03 16:18:12.326",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625839721950_-37165482",
      "id": "20210709-140841_1557013711",
      "dateCreated": "2021-07-09 14:08:41.950",
      "dateStarted": "2021-08-03 16:18:12.357",
      "dateFinished": "2021-08-03 16:18:12.511",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n# Normalization\n",
      "user": "dcr",
      "dateUpdated": "2021-08-03 16:18:12.557",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eNormalization\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1625839841769_2030826874",
      "id": "20210709-141041_2000243903",
      "dateCreated": "2021-07-09 14:10:41.769",
      "dateStarted": "2021-08-03 16:18:12.588",
      "dateFinished": "2021-08-03 16:18:12.590",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "getScaler",
      "text": "%spark.pyspark\n\ndef getScaler(scalerType):\n    \u0027\u0027\u0027Returns correct scaler for chosen normalization.\u0027\u0027\u0027\n    \n    if scalerType \u003d\u003d \u0027standard\u0027: \n        from pyspark.ml.feature import StandardScaler\n        Scaler \u003d StandardScaler(withMean\u003dTrue, withStd \u003d True)\n    elif scalerType \u003d\u003d \u0027MinMax\u0027:\n        from pyspark.ml.feature import MinMaxScaler\n        Scaler \u003d MinMaxScaler()\n    else: raise NameError(f\u0027scalerType can be either \"MinMax\" or \"standard\" not {scaler}\u0027)\n    return Scaler\n\n\ndef getScalerModel(df, scalerType \u003d \u0027standard\u0027, featuresCol \u003d \u0027features\u0027,\n                       outCol \u003d \u0027norm_features\u0027, save \u003d False):\n    \u0027\u0027\u0027normalizes DenseVectors for MLlib\u0027\u0027\u0027\n\n    scaler \u003d getScaler(scalerType \u003d scalerType) # Get scaler\n    scaler.setInputCol(featuresCol)         # Set feature column name\n    scaler.setOutputCol(outCol)\n    model \u003d scaler.fit(df)\n    if save:\n        model.save(f\u0027{save}/{scalerType}_normalisation_model\u0027)\n        print(f\u0027Normalisation model saved at \"{save}/{scalerType}_normalisation_model\"\u0027)\n    return model\n\ndef normaliseData(df, model,):\n    \u0027\u0027\u0027normalizes featureCol of df using model from \"getScalerModel\" \u0027\u0027\u0027\n\n    return model.transform(df)",
      "user": "dcr",
      "dateUpdated": "2021-08-03 16:18:12.686",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1626107486964_960926674",
      "id": "20210712-163126_1792127427",
      "dateCreated": "2021-07-12 16:31:26.964",
      "dateStarted": "2021-08-03 16:18:12.722",
      "dateFinished": "2021-08-03 16:18:12.825",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Build the Model",
      "text": "%spark.pyspark\n\ndef dataSparkML(df, regime, labelCol \u003d \u0027labels\u0027, featuresCol \u003d \u0027features\u0027, \n                normalise \u003d False, scalerType \u003d \u0027standard\u0027, save \u003d False):\n    \u0027\u0027\u0027get train and test dataset for input using pyspark.ml\u0027\u0027\u0027\n\n    # Get data and label columns for the selected regime\n    data  \u003d get_training_data(df, regime \u003d regime)\n    train_features \u003d select_training_features(data[0], regime \u003d regime)\n    N_features \u003d len(train_features)\n    # Assemble assember to merge features into DenseVector\n    assembler \u003d VectorAssembler(inputCols\u003dtrain_features,\n                                outputCol\u003dfeaturesCol)\n    \n    \n    train \u003d assembler.transform(data[0])\\\n                .select([\u0027source_id\u0027, featuresCol, labelCol])\n    test  \u003d assembler.transform(data[1])\\\n                .select([\u0027source_id\u0027, featuresCol, labelCol])\n    \n    if normalise:\n        # We rename featuresCol to maintain col name for later analysis\n        model \u003d getScalerModel(train.withColumnRenamed(featuresCol, \u0027inputFeatures\u0027),\n                               scalerType \u003d scalerType, featuresCol \u003d \u0027inputFeatures\u0027, \n                               outCol \u003d featuresCol, save \u003d save)\n        \n        # Normalise each dataset with the training data distributions\n        train \u003d normaliseData(train.withColumnRenamed(featuresCol, \u0027inputFeatures\u0027), model)\n        test  \u003d normaliseData( test.withColumnRenamed(featuresCol, \u0027inputFeatures\u0027), model)\n        \n        print(f\u0027Training data \u003d {train.count()} sources\u0027)\n    \n    return (train, test, N_features)\n\n# train,test, N_features, model \u003d dataSparkML(df, regime \u003d \u0027low\u0027, labelCol \u003d \u0027is_good\u0027, normalise \u003d True)",
      "user": "dcr",
      "dateUpdated": "2021-08-03 16:18:12.918",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625839841352_1320842855",
      "id": "20210709-141041_25617336",
      "dateCreated": "2021-07-09 14:10:41.352",
      "dateStarted": "2021-08-03 16:18:12.952",
      "dateFinished": "2021-08-03 16:18:13.495",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "MLlib_confusion_matrix",
      "text": "%spark.pyspark\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pylab as plt\nfrom collections import Counter\n\nclass MLlib_confusion_matrix():\n    \u0027\u0027\u0027subclass to plot confusion matrix\u0027\u0027\u0027\n    def __init__(self, df, labelCol \u003d \u0027label\u0027, classes \u003d None, normalize \u003d True):\n        self.df               \u003d df\n        self.getLabelCol      \u003d labelCol\n        self.grouped          \u003d df.groupBy(labelCol, \u0027prediction\u0027).count().toPandas()\n        self.matrix           \u003d self.getConfusionMatrix()\n        self.normMatrix       \u003d self.getNormConfusionMatrix()\n        self.confusion_matrix \u003d self.confusionMatrix(classes, normalize)\n\n    def __repr__(self) : return f\"\"\"Class for plotting confusion matrix {self.normMatrix}\"\"\"\n\n    def getConfusionMatrix(self):\n        \u0027\u0027\u0027returns confusion matrix based on values\u0027\u0027\u0027\n\n        N_classes \u003d len(set(self.grouped[self.getLabelCol]))\n        matrix \u003d np.empty((N_classes, N_classes))\n        for i in range(N_classes):\n            for j in range(N_classes):\n                c \u003d self.grouped[(self.grouped[self.getLabelCol] \u003d\u003d i) \u0026 \n                                 (self.grouped.prediction \u003d\u003d j)][\u0027count\u0027].values\n                if len(c) \u003d\u003d 0:\n                    c \u003d 0 \n                matrix[i][j] \u003d  c\n        return matrix\n\n    def getNormConfusionMatrix(self):\n        \u0027\u0027\u0027returns confusion matrix based on values\u0027\u0027\u0027\n\n        N_classes \u003d len(set(self.grouped[self.getLabelCol]))\n        matrix \u003d np.empty((N_classes, N_classes))\n        for i in range(N_classes):\n            for j in range(N_classes):\n                c \u003d self.grouped[(self.grouped[self.getLabelCol] \u003d\u003d i) \u0026 \n                        (self.grouped.prediction \u003d\u003d j)][\u0027count\u0027].values\\\n                            /sum(self.grouped[(self.grouped[self.getLabelCol] \u003d\u003d i)][\u0027count\u0027])\n                if len(c) \u003d\u003d 0:\n                    c \u003d 0 \n                matrix[i][j] \u003d  np.round(c , 4)\n        return matrix\n    \n    def confusionMatrix(self, classes \u003d None, normalize \u003d True):\n        \u0027\u0027\u0027prints rich version of confusion matrix\u0027\u0027\u0027\n\n        if normalize: matrix \u003d self.normMatrix\n        else: matrix \u003d self.matrix\n        if classes \u003d\u003d None:\n            classes \u003d range(len(matrix))\n\n        N_classes \u003d range(len(classes))\n        plt.rcParams[\u0027figure.figsize\u0027] \u003d (6,6)\n\n        plt.imshow(matrix, cmap \u003d \u0027Greens\u0027, alpha \u003d 0.75)\n        for i in N_classes: # Add values to max pooling\n            for j in N_classes:\n                text \u003d plt.text(j, i, matrix[i][j],\n                               ha\u003d\"center\", va\u003d\"center\", color\u003d\"k\", fontsize \u003d 20)\n\n        #Add thick line to matrix\n        axis \u003d plt.gca()\n        axis.set_yticks(np.arange(-0.5, len(classes)-0.5, 1), minor\u003d\u0027True\u0027)\n        axis.set_xticks(np.arange(-0.5, len(classes)-0.5, 1), minor\u003d\u0027True\u0027)\n        axis.yaxis.grid(True, which\u003d\u0027minor\u0027, color \u003d \u0027k\u0027, lw \u003d 2)\n        axis.xaxis.grid(True, which\u003d\u0027minor\u0027, color \u003d \u0027k\u0027, lw \u003d 2)\n        plt.xticks(N_classes, classes, rotation \u003d0, fontsize \u003d 14)\n        plt.yticks(N_classes, classes, rotation \u003d0, fontsize \u003d 14)\n        plt.xlabel(\u0027Predicted Class\u0027, fontsize \u003d 16)\n        plt.ylabel(\u0027True Class\u0027, fontsize \u003d 16)\n        \n        \nclass MLlibMultiClassEvaluator(MLlib_confusion_matrix):\n    \u0027\u0027\u0027class to calculate parameters of NN performance for binary classification\u0027\u0027\u0027\n    \n    def __init__(self, df, labelCol \u003d \u0027label\u0027):\n        self.df            \u003d df\n        self.getLabelCol   \u003d labelCol\n        self.show          \u003d df.show\n        # self.count         \u003d df.count\n        # self.shape         \u003d (df.count(), len(df.columns))\n        # self.grouped       \u003d df.groupBy(labelCol, \u0027prediction\u0027).count().toPandas()\n        self.matrix        \u003d self.getConfusionMatrix()\n        \n    # def __len__(self)         : return self.df.count()\n    # def __repr__(self)        : return f\"\"\"Evaluate ML performance for {len(self)} datapoints.\"\"\"\n    \n    def getAnalysis(self):\n        \u0027\u0027\u0027returns a pd.DataFrame for analysis\u0027\u0027\u0027\n        data \u003d self.df.select(self.getLabelCol,\u0027probability\u0027, \u0027prediction\u0027).toPandas()\n        for i in range(max(data[self.getLabelCol])+1):\n            data[f\u0027prob\u0027] \u003d [max(j) for j in data.probability]\n        return data\n    \n    def getTruePositives(self, step \u003d np.arange(0.0, 0.95, 0.01)):\n        \u0027\u0027\u0027calculates how True Positives change by threshold\u0027\u0027\u0027\n        conMat \u003d self.getConfusionMatrix()\n        data \u003d self.getAnalysis()\n        tp \u003d {}\n        for cat in range(len(conMat)):\n            tp[cat] \u003d []\n        for cat in range(len(conMat)):\n            for threshold in step:\n                tmp \u003d Counter(data[(data[\u0027prediction\u0027] \u003d\u003d data[self.getLabelCol]) \u0026 \n                                   (data[f\u0027prob\u0027]\u003ethreshold)][self.getLabelCol])\n                for cat in range(len(conMat)):\n                    tp[cat].append(tmp[cat])\n            return tp\n        \n        \n    def getFalsePositives(self, step \u003d np.arange(0.0, 0.95, 0.01)):\n        \u0027\u0027\u0027calculates how True Positives change by threshold\u0027\u0027\u0027\n        conMat \u003d self.getConfusionMatrix()\n        data \u003d self.getAnalysis()\n        fp \u003d {}\n        for cat in range(len(conMat)):\n            fp[cat] \u003d []\n        for cat in range(len(conMat)):\n            for threshold in step:\n                tmp \u003d Counter(data[(data[\u0027prediction\u0027] !\u003d data[self.getLabelCol]) \u0026 \n                                   (data[f\u0027prob\u0027]\u003ethreshold)].prediction)\n                for cat in range(len(conMat)):\n                    fp[cat].append(tmp[cat])\n            return fp        \n        \n    def getFalseNegatives(self, step \u003d np.arange(0.0, 0.95, 0.01)):\n        \u0027\u0027\u0027calculates how False Positives change by threshold\u0027\u0027\u0027\n        conMat \u003d self.getConfusionMatrix()\n        data \u003d self.getAnalysis()\n        fn \u003d {}\n        for cat in range(len(conMat)):\n            fn[cat] \u003d []\n        for cat in range(len(conMat)):\n            for threshold in step:\n                tmp \u003d Counter(data[(data[\u0027prediction\u0027] !\u003d data[self.getLabelCol]) \u0026 \n                                   (data[f\u0027prob\u0027]\u003ethreshold)][self.getLabelCol])\n                for cat in range(len(conMat)):\n                    fn[cat].append(tmp[cat])\n            return fn\n        \n    def getPrecision(self, step \u003d np.arange(0.0, 0.95, 0.01)):\n        \u0027\u0027\u0027calculate precision\u0027\u0027\u0027\n        precision \u003d {}; true_positives \u003d self.getTruePositives(step); \n        false_positives \u003d self.getFalsePositives(step)\n        conMat \u003d self.getConfusionMatrix()\n        precision \u003d {}\n        for cat in range(len(conMat)):\n            precision[cat] \u003d conMat[cat][cat]\n            for cat in range(len(conMat)):\n                precision[cat] \u003d [tp / (tp+fp) for tp, fp in zip(true_positives[cat],false_positives[cat])]\n        return precision\n    \n    def getRecall(self, step \u003d np.arange(0.0, 0.95, 0.01)):\n        \u0027\u0027\u0027calculate recall\u0027\u0027\u0027\n        conMat \u003d self.getConfusionMatrix()\n        recall \u003d {}; true_positives \u003d self.getTruePositives(step); \n        false_negatives \u003d self.getFalseNegatives(step)\n        for cat in range(len(conMat)):\n            recall[cat] \u003d []\n            for cat in range(len(conMat)):\n                recall[cat] \u003d [tp / (tp+fn) for tp, fn in zip(true_positives[cat],false_negatives[cat])]\n        return recall\n    \n    \nclass plottingThreshold(MLlibMultiClassEvaluator):\n    \u0027\u0027\u0027subclass of \"threshold\" for various plots of useful threshold parameters.\u0027\u0027\u0027\n    \n    def __repr__(self): return f\"\"\"Plotting software for \u0027threshold\u0027 objects\"\"\"\n    def __init__(self, df, labelCol \u003d \u0027label\u0027):\n        self.df            \u003d df\n        self.getLabelCol   \u003d labelCol\n        self.show          \u003d df.show\n        # self.count         \u003d df.count\n        # self.shape         \u003d (df.count(), len(df.columns))\n        self.grouped       \u003d df.groupBy(labelCol, \u0027prediction\u0027).count().toPandas()\n        self.matrix        \u003d self.getConfusionMatrix()\n        \n        \n    def getAxes(self,ax):\n        if ax \u003d\u003d None:\n            ax \u003d plt.subplot(111)\n        return ax\n\n    def plot_true_positives(self, ax \u003d None, step \u003d np.arange(0.0, 0.95, 0.01), normalize \u003d True, legend \u003d True):\n        ax \u003d self.getAxes(ax); true_positives \u003d self.getTruePositives(step); \n        conMat \u003d self.getConfusionMatrix()\n        for cat in range(len(conMat)):\n            if normalize \u003d\u003d True:\n                y \u003d [i/max(true_positives[cat]) for i in true_positives[cat]]\n                ax.set_ylabel(\u0027Fraction of Total True Positives --\u003e\u0027)\n            else:\n                y \u003d [i/len(self.data[self.data.true_label \u003d\u003d cat]) for i in true_positives[cat]]\n                ax.set_ylabel(\u0027True Positives --\u003e\u0027)\n            ax.plot(step, y, label \u003d cat)\n        if legend:\n            ax.legend()\n        ax.grid(\u0027on\u0027)\n        ax.set_xlabel(\u0027Threshold\u0027)\n\n    def plot_false_positives(self, ax \u003d None, step \u003d np.arange(0.0, 0.95, 0.01), legend \u003d True):\n        ax \u003d self.getAxes(ax); false_positives \u003d self.getFalsePositives(step)\n        conMat \u003d self.getConfusionMatrix()\n        for cat in range(len(conMat)):\n            if max(false_positives[cat]) !\u003d 0:\n                y \u003d [i/max(false_positives[cat]) for i in false_positives[cat]]\n            else: y \u003d [i for i in false_positives[cat]]\n            ax.plot(step, y, label \u003d cat)\n        if legend:\n            ax.legend()\n        ax.grid(\u0027on\u0027)\n        ax.set_xlabel(\u0027Threshold\u0027)\n        ax.set_ylabel(\u0027\u003c-- Fraction of Total False Positives\u0027)\n\n    def plot_precision(self, ax \u003d None, step \u003d np.arange(0.0, 0.95, 0.01), legend \u003d True):\n        ax \u003d self.getAxes(ax); precision \u003d self.getPrecision(step)\n        conMat \u003d self.getConfusionMatrix()\n        for cat in range(len(conMat)):\n            y \u003d precision[cat]\n            ax.plot(step, y, label \u003d cat)\n        if legend:\n            ax.legend()\n        ax.grid(\u0027on\u0027)\n        ax.set_xlabel(\u0027Threshold\u0027)\n        ax.set_ylabel(\u0027Precision --\u003e\u0027)\n\n    def plot_recall(self, ax \u003d None, step \u003d np.arange(0.0, 0.95, 0.01), legend \u003d True):\n        ax \u003d self.getAxes(ax); recall \u003d self.getRecall(step)\n        conMat \u003d self.getConfusionMatrix()\n        for cat in range(len(conMat)):\n            y \u003d recall[cat]\n            ax.plot(step, y, label \u003d cat)\n        if legend:\n            ax.legend()\n        ax.grid(\u0027on\u0027)\n        ax.set_xlabel(\u0027Threshold\u0027)\n        ax.set_ylabel(\u0027Recall --\u003e\u0027)\n        \n\n    def threshold_subplots(self, step \u003d np.arange(0.0, 0.95, 0.01), figsize\u003d(15, 8)):\n        import matplotlib.gridspec as gridspec\n        fig \u003d plt.figure(figsize \u003d figsize)\n        gs \u003d gridspec.GridSpec(ncols\u003d2, nrows\u003d2, figure\u003dfig)\n        ax1 \u003d fig.add_subplot(gs[0, 0])\n        ax2 \u003d fig.add_subplot(gs[0, 1])\n        ax3 \u003d fig.add_subplot(gs[1, 0])\n        ax4 \u003d fig.add_subplot(gs[1, 1])\n\n        axs \u003d [ax1, ax2, ax3, ax4]\n        self.plot_precision      (ax \u003d axs[0], step \u003d step, legend \u003d False)\n        self.plot_recall         (ax \u003d axs[1], step \u003d step, legend \u003d False)\n        self.plot_true_positives (ax \u003d axs[2], step \u003d step, legend \u003d True )\n        self.plot_false_positives(ax \u003d axs[3], step \u003d step, legend \u003d True )\n        plt.tight_layout()",
      "user": "dcr",
      "dateUpdated": "2021-08-04 09:14:12.166",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625583466178_2136528193",
      "id": "20210706-145746_766891138",
      "dateCreated": "2021-07-06 14:57:46.178",
      "dateStarted": "2021-08-04 09:09:08.553",
      "dateFinished": "2021-08-04 09:09:08.872",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Train the model",
      "text": "%spark.pyspark\n\ndef nnTrainModel(df, regime, labelCol \u003d \u0027label\u0027,\n                 featuresCol \u003d \u0027features\u0027,\n                 scalerType \u003d \u0027standard\u0027, save \u003d False, \n                 normalise \u003d False):\n    \u0027\u0027\u0027trains a neural network using sparkML\u0027\u0027\u0027\n    \n    # get train, test and N_features \n    train, test, \\\n        N_features \u003d dataSparkML(df \u003d df, regime \u003d regime, labelCol \u003d labelCol, \n                                 normalise \u003d normalise, featuresCol \u003d featuresCol,\n                                 save \u003d save, scalerType \u003d scalerType)\n    \n    # specify layers for the neural network:\n    layers \u003d [N_features, 64, 64, 64, 64, 2]\n\n    # create the trainer and set its parameters\n    trainer \u003d MultilayerPerceptronClassifier(maxIter\u003d100, layers\u003dlayers, blockSize\u003d128, seed\u003d42)\\\n                    .setLabelCol(labelCol)\n    \n    print(trainer)\n\n    # train the model\n    model \u003d trainer.fit(train)\n    if save:\n        model.save(f\u0027{save}/MultilayerPerceptronClassifier/\u0027)\n    return train, test, model\n\n\ntrain, test, model \u003d nnTrainModel(df \u003d df, regime \u003d \u0027high\u0027, normalise \u003d False,\n                                  labelCol \u003d \u0027is_good\u0027, scalerType \u003d \u0027standard\u0027,)\n                                #   save \u003d \u0027{user_home}ML_cuts/highSNR\u0027)\n                                  \n# Low training sources: 5,878,144 for \u003c1 kpc\n# High training sources: XX for \u003c3 kpc",
      "user": "dcr",
      "dateUpdated": "2021-08-04 11:31:33.162",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "High SNR dataset returned\nMultilayerPerceptronClassifier_c5188d23e933\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1625839840935_1063460131",
      "id": "20210709-141040_1258934891",
      "dateCreated": "2021-07-09 14:10:40.935",
      "dateStarted": "2021-08-03 16:18:13.819",
      "dateFinished": "2021-08-03 17:03:16.321",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Evaluate Model",
      "text": "%spark.pyspark\n\ndef evaluateModel(model, df, labelCol \u003d \u0027label\u0027, evaluate \u003d False,\n                  normalise \u003d True,\n                  step \u003d np.arange(0.5, 0.99, 0.1)):\n    \u0027\u0027\u0027Apply a NN to new data, with the option to evaluate if test dataset\u0027\u0027\u0027\n    \n    # compute accuracy on the test set\n    result \u003d model.transform(df)\n    predictionAndLabels \u003d result.select(\"prediction\", \u0027is_good\u0027)\n    evaluator \u003d MulticlassClassificationEvaluator(metricName\u003d\"accuracy\").setLabelCol(labelCol)\n#     print(\"Test set accuracy \u003d \" + str(evaluator.evaluate(predictionAndLabels)))\n    \n    if evaluate:\n        # Call MLlib_confusion_matrix class to plot confusion matrix\n        res \u003d MLlib_confusion_matrix(result, labelCol \u003d labelCol)\n        res.confusionMatrix(classes \u003d [\u0027Bad\u0027, \u0027Good\u0027], normalize \u003d True)\n        \n        # Call plottingThreshold to explore the effect of Thresholding\n        plottingThreshold(result, labelCol \u003d labelCol)\\\n            .threshold_subplots(step \u003d step)\n\n    return result\n\nresult \u003d evaluateModel(model \u003d model, df \u003d test, normalise \u003d True,  evaluate \u003d True, \n                      labelCol \u003d \u0027is_good\u0027)\n\n",
      "user": "dcr",
      "dateUpdated": "2021-08-04 09:09:15.042",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cFigure size 432x432 with 1 Axes\u003e\n"
          },
          {
            "type": "IMG",
            "data": "\u003d\u003d\n\n"
          },
          {
            "type": "TEXT",
            "data": "\u003cFigure size 1080x576 with 4 Axes\u003e\n"
          },
          {
            "type": "IMG",
            "data": "\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1626107603462_339089471",
      "id": "20210712-163323_837319583",
      "dateCreated": "2021-07-12 16:33:23.462",
      "dateStarted": "2021-08-04 09:09:15.081",
      "dateFinished": "2021-08-04 09:12:58.205",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\nresult.createOrReplaceTempView(\u0027ML_res\u0027)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 09:15:10.762",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1625840791896_-509318819",
      "id": "20210709-142631_1238119948",
      "dateCreated": "2021-07-09 14:26:31.896",
      "dateStarted": "2021-08-04 09:15:10.813",
      "dateFinished": "2021-08-04 09:15:10.971",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "CAMD_2",
      "text": "%spark.pyspark\ndef CAMD(passbands, catalogue, classes, colors \u003d [\u0027k\u0027, \u0027darkred\u0027, \u0027darkblue\u0027], \n         ms \u003d 1, labels \u003d None, limit \u003d 10000):\n    \u0027\u0027\u0027Plot an observational Hertzsprung-Russell diagram (aka colour / absolute magnitude diagram)\n    for the unclassified sample to show the problem,\n    include the photometric consistency filter to show the problem is astrometric in addition to photometric \u0027\u0027\u0027\n    \n    fig \u003d plt.figure(0, figsize \u003d (9.0, 9.0))\n    c \u003d -1\n    for i in classes:\n        c+\u003d1\n        if type(ms) \u003d\u003d list:\n            s \u003d ms[c]\n        else: s \u003d ms\n        if type(labels) \u003d\u003d type(None):\n            label \u003d i\n        else: label \u003d labels[c]\n        unclassified_camd_df \u003d spark.sql(f\u0027SELECT b.prediction , a.source_id,\\\n                                         a.phot_{passbands[0]}_mean_mag + 5.0*LOG10(a.parallax/100.0) \\\n                                         AS m_{passbands[0]}, {passbands[1]} FROM {catalogue} as a, \\\n                                         {\"ML_res\"} as b \\\n                                         WHERE a.source_id \u003d b.source_id AND parallax \u003e 0 \\\n                                         LIMIT {limit}\u0027)\n        \n        unclassified_camd_df \u003d unclassified_camd_df.filter(col(\u0027prediction\u0027) \u003d\u003d c)\n        x \u003d unclassified_camd_df.select(\u0027g_rp\u0027).toPandas()[\u0027g_rp\u0027][:limit]\n        y \u003d unclassified_camd_df.select(\u0027m_g\u0027).toPandas()[\u0027m_g\u0027][:limit]\n        plt.scatter(x, y, marker \u003d \u0027.\u0027, s \u003d ms, label \u003d label, color \u003d colors[c])\n    plt.ylim(21.0, -3.0)\n    plt.xlim(0, 3.5)\n    plt.ylabel(\u0027Stellar brightness (absolute G magnitude) --\u003e\u0027, fontsize \u003d 16)\n    plt.xlabel(\u0027\u003c-- Stellar temperature (G - RP magnitude)\u0027, fontsize \u003d 16)\n    lgnd \u003d plt.legend(fontsize \u003d 12)\n    for i in range(len(classes)):\n        lgnd.legendHandles[i]._sizes \u003d [55]\n\n# CAMD(passbands \u003d [\u0027g\u0027, \u0027g_rp\u0027], catalogue \u003d \u0027dcr_raw_sources\u0027, \n#      colors \u003d [\u0027grey\u0027, \u0027green\u0027], classes \u003d [\u0027Bad\u0027,\u0027Good\u0027], ms \u003d 1, limit \u003d 5000)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 14:55:04.559",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)\n\u001b[0;32m/tmp/ipykernel_8494/377201807.py\u001b[0m in \u001b[0;36m\u003cmodule\u003e\u001b[0;34m\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m CAMD(passbands \u003d [\u0027g\u0027, \u0027g_rp\u0027], catalogue \u003d \u0027dcr_raw_sources\u0027, \n\u001b[0;32m---\u003e 37\u001b[0;31m      colors \u003d [\u0027grey\u0027, \u0027green\u0027], classes \u003d [\u0027Bad\u0027,\u0027Good\u0027], ms \u003d 1, limit \u003d 5000)\n\u001b[0m\n\u001b[0;32m/tmp/ipykernel_8494/377201807.py\u001b[0m in \u001b[0;36mCAMD\u001b[0;34m(passbands, catalogue, classes, colors, ms, labels, limit)\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m         \u001b[0munclassified_camd_df\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0munclassified_camd_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u0027prediction\u0027\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m\u003d\u003d\u001b[0m \u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 25\u001b[0;31m         \u001b[0mx\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0munclassified_camd_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u0027g_rp\u0027\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoPandas\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\u0027g_rp\u0027\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mlimit\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0munclassified_camd_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mselect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\u0027m_g\u0027\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoPandas\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\u0027m_g\u0027\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mlimit\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m         \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarker\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0;34m\u0027.\u0027\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolor\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mcolors\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/spark/python/lib/pyspark.zip/pyspark/sql/dataframe.py\u001b[0m in \u001b[0;36mtoPandas\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   2153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2154\u001b[0m         \u001b[0;31m# Below is toPandas without Arrow optimization.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 2155\u001b[0;31m         \u001b[0mpdf\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDataFrame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfrom_records\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcollect\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m\u003d\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2156\u001b[0m         \u001b[0mcolumn_counter\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mCounter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2157\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/spark/python/lib/pyspark.zip/pyspark/sql/dataframe.py\u001b[0m in \u001b[0;36mcollect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    533\u001b[0m         \"\"\"\n\u001b[1;32m    534\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mSCCallSiteSync\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sc\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcss\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 535\u001b[0;31m             \u001b[0msock_info\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcollectToPython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    536\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_load_from_socket\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msock_info\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mBatchedSerializer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mPickleSerializer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    537\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args)\u001b[0m\n\u001b[1;32m   1253\u001b[0m             \u001b[0mproto\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mEND_COMMAND_PART\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1254\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1255\u001b[0;31m         \u001b[0manswer\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgateway_client\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1256\u001b[0m         return_value \u003d get_return_value(\n\u001b[1;32m   1257\u001b[0m             answer, self.gateway_client, self.target_id, self.name)\n\n\u001b[0;32m/opt/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36msend_command\u001b[0;34m(self, command, retry, binary)\u001b[0m\n\u001b[1;32m    983\u001b[0m         \u001b[0mconnection\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_connection\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    984\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 985\u001b[0;31m             \u001b[0mresponse\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0mconnection\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msend_command\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcommand\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    986\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbinary\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    987\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresponse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_connection_guard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconnection\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/opt/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\u001b[0m in \u001b[0;36msend_command\u001b[0;34m(self, command)\u001b[0m\n\u001b[1;32m   1150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1151\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1152\u001b[0;31m             \u001b[0manswer\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0msmart_decode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstream\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1153\u001b[0m             \u001b[0mlogger\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdebug\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Answer received: {0}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0manswer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1154\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0manswer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mproto\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRETURN_MESSAGE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;32m/usr/lib64/python3.7/socket.py\u001b[0m in \u001b[0;36mreadinto\u001b[0;34m(self, b)\u001b[0m\n\u001b[1;32m    587\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 589\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_sock\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_into\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    590\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    591\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_timeout_occurred\u001b[0m \u001b[0;34m\u003d\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\n\u001b[0;31mKeyboardInterrupt\u001b[0m: \u003cFigure size 648x648 with 1 Axes\u003e\n"
          },
          {
            "type": "IMG",
            "data": "\n"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1625860018274_-1211352710",
      "id": "20210709-194658_1026318834",
      "dateCreated": "2021-07-09 19:46:58.274",
      "dateStarted": "2021-08-04 09:16:08.474",
      "dateFinished": "2021-08-04 09:20:26.073",
      "status": "ABORT",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\ntest.filter(col(\u0027is_good\u0027) \u003d\u003d 0).count(), test.count()",
      "user": "dcr",
      "dateUpdated": "2021-08-04 10:34:59.272",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "(835871, 1130126)"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1628073268247_-905529329",
      "id": "20210804-103428_592871051",
      "dateCreated": "2021-08-04 10:34:28.247",
      "dateStarted": "2021-08-04 10:34:59.309",
      "dateFinished": "2021-08-04 10:35:03.906",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\ndef CAMD(passbands, catalogue, classes, colors \u003d [\u0027k\u0027, \u0027darkred\u0027, \u0027darkblue\u0027], \n         ms \u003d 1, labels \u003d None, limit \u003d 10000):\n    \u0027\u0027\u0027Plot an observational Hertzsprung-Russell diagram (aka colour / absolute magnitude diagram)\n    for the unclassified sample to show the problem,\n    include the photometric consistency filter to show the problem is astrometric in addition to photometric \u0027\u0027\u0027\n    \n    fig \u003d plt.figure(0, figsize \u003d (9.0, 9.0))\n    c \u003d -1\n    \n    unclassified_camd_df \u003d spark.sql(f\u0027SELECT b.prediction , a.source_id,\\\n                                         a.phot_{passbands[0]}_mean_mag + 5.0*LOG10(a.parallax/100.0) \\\n                                         AS m_{passbands[0]}, {passbands[1]} FROM {catalogue} as a, \\\n                                         {\"ML_res\"} as b \\\n                                         WHERE a.source_id \u003d b.source_id \\\n                                         LIMIT {limit}\u0027)\n    for i in classes:\n        c+\u003d1\n        if type(ms) \u003d\u003d list:\n            s \u003d ms[c]\n        else: s \u003d ms\n        if type(labels) \u003d\u003d type(None):\n            label \u003d i\n        else: label \u003d labels[c]\n        \n        tmp \u003d unclassified_camd_df.filter(col(\u0027prediction\u0027) \u003d\u003d c)\n        tmp \u003d tmp.select([\u0027g_rp\u0027, \u0027m_g\u0027]).toPandas()\n        plt.scatter(tmp[\u0027g_rp\u0027], tmp[\u0027m_g\u0027], marker \u003d \u0027.\u0027, s \u003d ms, label \u003d label, color \u003d colors[c])\n    plt.ylim(21.0, -3.0)\n    plt.xlim(0, 3.5)\n    plt.ylabel(\u0027Stellar brightness (absolute G magnitude) --\u003e\u0027, fontsize \u003d 16)\n    plt.xlabel(\u0027\u003c-- Stellar temperature (G - RP magnitude)\u0027, fontsize \u003d 16)\n    lgnd \u003d plt.legend(fontsize \u003d 12)\n    for i in range(len(classes)):\n        lgnd.legendHandles[i]._sizes \u003d [55]\n        \n# CAMD(passbands \u003d [\u0027g\u0027, \u0027g_rp\u0027], catalogue \u003d \u0027dcr_raw_sources\u0027, \n#      colors \u003d [\u0027grey\u0027, \u0027green\u0027], classes \u003d [\u0027Bad\u0027,\u0027Good\u0027], ms \u003d 1, limit \u003d 5000)",
      "user": "dcr",
      "dateUpdated": "2021-08-04 14:55:16.571",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1628068734096_1236120530",
      "id": "20210804-091854_542122573",
      "dateCreated": "2021-08-04 09:18:54.096",
      "dateStarted": "2021-08-04 14:55:16.619",
      "dateFinished": "2021-08-04 14:55:16.819",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\n# Evalute all sources from raw_sources_cached using the given model\n",
      "user": "dcr",
      "dateUpdated": "2021-08-03 15:55:23.695",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eEvalute all sources from raw_sources_cached using the given model\u003c/h1\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1626167903323_406401056",
      "id": "20210713-091823_1640482153",
      "dateCreated": "2021-07-13 09:18:23.323",
      "dateStarted": "2021-07-19 13:30:00.822",
      "dateFinished": "2021-07-19 13:30:00.831",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Load models",
      "text": "%spark.pyspark\ndef loadScaler(filename, scalerType \u003d \u0027standard\u0027):\n    \u0027\u0027\u0027loads scaler based of scaler type\u0027\u0027\u0027\n    if scalerType \u003d\u003d \u0027standard\u0027:\n        from pyspark.ml.feature import StandardScalerModel\n        model \u003d StandardScalerModel.load(filename)\n    \n    elif scaterType \u003d\u003d \u0027MinMax\u0027:\n        from pyspark.ml.feature import MinMaxScalerModel\n        model \u003d MinMaxScalerModel.load(filename)\n    else: raise NameError(f\u0027scalerType can be either \"MinMax\" or \"standard\" not {scalerType}\u0027)\n    return model\n        \ndef nnLoadModel(filepath):\n    \u0027\u0027\u0027loads NN from savefile\u0027\u0027\u0027\n    from pyspark.ml.classification import MultilayerPerceptronClassificationModel\n    return MultilayerPerceptronClassificationModel.load(filepath) ",
      "user": "dcr",
      "dateUpdated": "2021-08-04 10:37:21.150",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "jobName": "paragraph_1626167902558_-301626373",
      "id": "20210713-091822_341278603",
      "dateCreated": "2021-07-13 09:18:22.558",
      "dateStarted": "2021-08-02 15:13:49.549",
      "dateFinished": "2021-08-02 15:13:49.786",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Evaluate Unlabelled Data",
      "text": "%spark.pyspark\n\ndef selectRegime(df, regime \u003d \u0027high\u0027):\n    if \u0027high\u0027 in regime:\n        return df.filter(col(\u0027abs_SNR\u0027) \u003e 4.5)\n    if \u0027low\u0027 in regime:\n        return df.filter(col(\u0027abs_SNR\u0027) \u003c 4.5)\n\n\ndef select_unlabelled_data(table, regime, filename, featuresCol \u003d \u0027features\u0027, \n                           normalise \u003d False, scalerType \u003d \u0027standard\u0027):\n    \u0027\u0027\u0027selects full table to apply the trained model\u0027\u0027\u0027\n    \n    features \u003d getFeatures(withPhotometric \u003d True)\n    # Get unlabelled data\n    df \u003d spark.sql(f\u0027SELECT a.*, a.phot_g_mean_mag + 5.0*LOG10(a.parallax/100.0) \\\n                                         AS m_g, a.g_rp FROM {table} as a\u0027)\n    df \u003d df.select(features).withColumn(\u0027abs_SNR\u0027, \n                        f.abs(col(\u0027parallax_over_error\u0027)))\n    \n    # Get data that fits the regime abs_SNR parameters\n    df \u003d selectRegime(df \u003d df, regime \u003d regime)\n    features \u003d select_training_features(df, regime \u003d regime)\n    \n    # Assemble training features into DenseVector\n    assembler \u003d VectorAssembler(inputCols\u003dfeatures,\n                                outputCol\u003dfeaturesCol)\n    df \u003d assembler.transform(df)\\\n                .select([\u0027source_id\u0027, \u0027m_g\u0027, \u0027g_rp\u0027, featuresCol])\n    \n    if normalise:\n        # Scale the independent test data with a loaded scaler\n        scaler \u003d loadScaler(f\u0027{filename}/{scalerType}_normalisation_model\u0027, scalerType \u003d scalerType)\n        df \u003d normaliseData(df.withColumnRenamed(featuresCol, \u0027inputFeatures\u0027), model \u003d scaler)\n        \n    # Evaluate data with trained model\n    nnModelRead \u003d nnLoadModel(filepath \u003d f\u0027{filename}/MultilayerPerceptronClassifier\u0027)\n    df \u003d evaluateModel(nnModel \u003d nnModelRead, df \u003d df, normalise \u003d True,  evaluate \u003d False, \n                       labelCol \u003d \u0027is_good\u0027)\n    return df\n\n# new \u003d select_unlabelled_data(table \u003d \u0027edr3_sources\u0027, regime \u003d \u0027high\u0027, filename \u003d \u0027temp/\u0027,\n#                       normalise \u003d True, scalerType \u003d \u0027standard\u0027)\n\n# new.createOrReplaceTempView(\u0027dcr_ML_res\u0027)",
      "user": "dcr",
      "dateUpdated": "2021-08-03 15:55:14.481",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1626167901869_-1328645231",
      "id": "20210713-091821_219105253",
      "dateCreated": "2021-07-13 09:18:21.869",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Spatial Plots",
      "text": "%spark.pyspark\ndef spatialDistributionSubplot(catalogue, resCat, class_val \u003d 0, label \u003d None, color \u003d \u0027k\u0027, save \u003d False):\n\n    plt.figure(3, figsize \u003d (16.18, 10.0))\n    \n    for i, value in enumerate(class_val):\n        plt.subplot(1,2,i+1, projection\u003d\u0027aitoff\u0027)\n        plt.grid(True)\n\n        df \u003d spark.sql(f\u0027SELECT b.prediction , b.source_id,\\\n                                                 a.ra, a.dec FROM {catalogue} as a, \\\n                                                 {resCat} as b \\\n                                                 WHERE a.source_id \u003d b.source_id \\\n                                                 AND b.prediction \u003d {class_val[i]}\u0027)\n        print(df.count())\n        x \u003d list((df.select(\u0027ra\u0027).toPandas()[\u0027ra\u0027] - 180.0) * np.pi / 180.0)\n        y \u003d list( df.select(\u0027dec\u0027).toPandas()[\u0027dec\u0027] * np.pi / 180.0)\n        plt.title(f\u0027{label[i]}\u0027)\n        plt.scatter(x, y, marker \u003d \u0027.\u0027, s \u003d 1, c \u003d color[i])\n    if save:\n        savefigs(save)\n    plt.show()\n    \n# spatialDistributionSubplot(catalogue \u003d \u0027edr3_sources\u0027, resCat \u003d \u0027dcr_ML_res\u0027, \n#                     class_val \u003d [1,0], label \u003d [\u0027Good Sources\u0027, \u0027Bad Sources\u0027], \n#                     color \u003d [\u0027k\u0027, \u0027darkred\u0027])",
      "user": "dcr",
      "dateUpdated": "2021-08-03 15:55:17.500",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": false,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python",
        "title": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1626167900973_-342336082",
      "id": "20210713-091820_414334511",
      "dateCreated": "2021-07-13 09:18:20.973",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n",
      "user": "dcr",
      "dateUpdated": "2021-07-13 09:18:18.457",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1626167898455_1167035981",
      "id": "20210713-091818_1065685626",
      "dateCreated": "2021-07-13 09:18:18.455",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%spark.pyspark\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "user": "dcr",
      "dateUpdated": "2021-07-13 09:18:30.403",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1625860067491_920688105",
      "id": "20210709-194747_1351702772",
      "dateCreated": "2021-07-09 19:47:47.492",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "experiments/dcr/ML_cuts",
  "id": "2G9BXYCKP",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "sh:shared_process": [],
    "spark:dcr:": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {}
}